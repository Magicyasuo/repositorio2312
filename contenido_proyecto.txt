### .\.gitignore ###
# Ignora entornos virtuales
env/
venv/

# Ignora archivos compilados
__pycache__/
*.pyc

# Ignora archivos de configuración
.env
db.sqlite3

# Ignora archivos estáticos generados
staticfiles/
node_modules/

# Ignora migraciones
*/migrations/


### .\contenido_proyecto.txt ###


### .\manage.py ###
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault(
        "DJANGO_SETTINGS_MODULE", "hospital_document_management.settings"
    )
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()



    








#     registro = RegistroDeArchivo.objects.first()
# print(registro.id)  # Mostrará el valor del campo id

# ......................
    import os

output_file = "contenido_proyecto.txt"

with open(output_file, "w", encoding="utf-8") as f:
    for root, dirs, files in os.walk("."):
        for file in files:
            file_path = os.path.join(root, file)
            f.write(f"### {file_path} ###\n")
            try:
                with open(file_path, "r", encoding="utf-8") as code_file:
                    f.write(code_file.read())
            except Exception as e:
                f.write(f"[Error al leer el archivo: {e}]\n")
            f.write("\n\n")
print(f"Todo el contenido del proyecto ha sido exportado a {output_file}")



### .\README.md ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte]


### .\.git\COMMIT_EDITMSG ###
Initial commit


### .\.git\config ###
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[remote "origin"]
	url = https://github.com/Magicyasuo/repositorio2312.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main


### .\.git\description ###
Unnamed repository; edit this file 'description' to name the repository.


### .\.git\HEAD ###
ref: refs/heads/main


### .\.git\index ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0x8b in position 15: invalid start byte]


### .\.git\hooks\applypatch-msg.sample ###
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:


### .\.git\hooks\commit-msg.sample ###
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}


### .\.git\hooks\fsmonitor-watchman.sample ###
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}


### .\.git\hooks\post-update.sample ###
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info


### .\.git\hooks\pre-applypatch.sample ###
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:


### .\.git\hooks\pre-commit.sample ###
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --


### .\.git\hooks\pre-merge-commit.sample ###
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:


### .\.git\hooks\pre-push.sample ###
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0


### .\.git\hooks\pre-rebase.sample ###
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END


### .\.git\hooks\pre-receive.sample ###
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi


### .\.git\hooks\prepare-commit-msg.sample ###
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi


### .\.git\hooks\push-to-checkout.sample ###
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi


### .\.git\hooks\sendemail-validate.sample ###
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi


### .\.git\hooks\update.sample ###
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0


### .\.git\info\exclude ###
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~


### .\.git\logs\HEAD ###
0000000000000000000000000000000000000000 57503546d7c9657fefead6f70127612349974f96 Diego <ingdiegoter1998@gmail.com> 1734883498 -0500	commit (initial): Initial commit
57503546d7c9657fefead6f70127612349974f96 0000000000000000000000000000000000000000 Diego <ingdiegoter1998@gmail.com> 1734883498 -0500	Branch: renamed refs/heads/master to refs/heads/main
0000000000000000000000000000000000000000 57503546d7c9657fefead6f70127612349974f96 Diego <ingdiegoter1998@gmail.com> 1734883498 -0500	Branch: renamed refs/heads/master to refs/heads/main


### .\.git\logs\refs\heads\main ###
0000000000000000000000000000000000000000 57503546d7c9657fefead6f70127612349974f96 Diego <ingdiegoter1998@gmail.com> 1734883498 -0500	commit (initial): Initial commit
57503546d7c9657fefead6f70127612349974f96 57503546d7c9657fefead6f70127612349974f96 Diego <ingdiegoter1998@gmail.com> 1734883498 -0500	Branch: renamed refs/heads/master to refs/heads/main


### .\.git\logs\refs\remotes\origin\main ###
0000000000000000000000000000000000000000 57503546d7c9657fefead6f70127612349974f96 Diego <ingdiegoter1998@gmail.com> 1734883500 -0500	update by push


### .\.git\objects\02\054941baef106817f3d929dc56419415f407e0 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte]


### .\.git\objects\20\68ebb2b5e84b8fd65eaed5c8e0ecaef01c6f4a ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte]


### .\.git\objects\2b\2b0e1b516441c5725915f0e3925109835797f1 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xc1 in position 4: invalid start byte]


### .\.git\objects\30\5f698d0cee9971e888a1a52bf9e931048e42b8 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcd in position 19: invalid continuation byte]


### .\.git\objects\31\5db477d3e72f4480de14e7a87b26e3a156aee7 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte]


### .\.git\objects\3b\c6eafe582ad81b6dbc0bd594e499e866a2cc75 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte]


### .\.git\objects\3c\04461194a3f3cd6a0dc9cd1ede008318397cab ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]


### .\.git\objects\40\85dc8caa0508abe08f76cf25576ac7a1044795 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0x8f in position 3: invalid start byte]


### .\.git\objects\41\0907e8f6844f82947709d202d14068a6aecddf ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xb6 in position 8: invalid start byte]


### .\.git\objects\49\67c819f11d93c2150b2ac4481bf54122aa2e12 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte]


### .\.git\objects\53\748ef1867cf037187b03a6dee69c58b12288dd ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte]


### .\.git\objects\57\503546d7c9657fefead6f70127612349974f96 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte]


### .\.git\objects\60\e3615f7098febae48cf9796661df32109fb091 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xdb in position 8: invalid continuation byte]


### .\.git\objects\65\b07eb60f3a81e916da6faa0fec1f18a56fed2e ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte]


### .\.git\objects\6d\bc9db94c9b03e41a6c5fc37af345dd5feb3ca3 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte]


### .\.git\objects\70\7433e67717a6a812ce79dcc23a3682f02c0bc5 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xb5 in position 8: invalid start byte]


### .\.git\objects\7c\e503c2dd97ba78597f6ff6e4393132753573f6 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte]


### .\.git\objects\80\560b3e72f9c0727ca6ea8968e36717673774ee ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte]


### .\.git\objects\81\997e94f4d80f3c3f9faa2741332d9e4781d09c ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte]


### .\.git\objects\82\457f1c45c453ace13deec61ad4cb92154050b6 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte]


### .\.git\objects\86\d135918926252170032eba2a2c9c1d02d5cb5d ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte]


### .\.git\objects\8a\59b386901c3782a30ea47c2a76f8a11e178d44 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte]


### .\.git\objects\9e\0862038bc6a949afc734d1936182005a5304ff ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte]


### .\.git\objects\aa\9221f9c78954da9110929d84385e9de4e3f104 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte]


### .\.git\objects\ac\384700a7d156d5f7f9737765862dc9f3a05c02 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xb4 in position 8: invalid start byte]


### .\.git\objects\b3\de832def92e9da6449d95882871f5918d094ec ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte]


### .\.git\objects\c0\b2d942f67509f70b0afb262257e391b7620242 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte]


### .\.git\objects\c3\252905ffc4564e62ff133977215b25c78e841b ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0x90 in position 3: invalid start byte]


### .\.git\objects\cd\db1542dc63a1ba673d1533cb6dcce85f8927ed ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0x8e in position 3: invalid start byte]


### .\.git\objects\d7\ad5db0e6c92ddd2d3de20b1305c71b64661b03 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcd in position 3: invalid continuation byte]


### .\.git\objects\dd\1c3062ef6a8d537abb0f17ba524b9a4ef1b045 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]


### .\.git\objects\e0\36e832bf5c50c6eefdf8cfc1bb46fee982e2a4 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0x90 in position 3: invalid start byte]


### .\.git\objects\e0\6664bd359bbde72a3b340e14a83e323b063f34 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xd5 in position 2: invalid continuation byte]


### .\.git\objects\e6\9de29bb2d1d6434b8b29ae775ad8c2e48c5391 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte]


### .\.git\objects\e9\2909639419f77f1c0c25d4be7b5bea4273c9f5 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte]


### .\.git\objects\ea\31aa1f9445cb9eda13e46e057e86386a9eec56 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]


### .\.git\objects\f2\ffc4982da5d48bf26cf95536eb10bc32b0d403 ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte]


### .\.git\refs\heads\main ###
57503546d7c9657fefead6f70127612349974f96


### .\.git\refs\remotes\origin\main ###
57503546d7c9657fefead6f70127612349974f96


### .\documentos\admin.py ###
from django.contrib import admin
from .models import (
    SerieDocumental, SubserieDocumental, RegistroDeArchivo, PermisoUsuarioSerie, 
    EntidadProductora, UnidadAdministrativa, OficinaProductora, Objeto, FUID
)


@admin.register(SerieDocumental)
class SerieDocumentalAdmin(admin.ModelAdmin):
    list_display = ('codigo', 'nombre')
    search_fields = ('codigo', 'nombre')


@admin.register(SubserieDocumental)
class SubserieDocumentalAdmin(admin.ModelAdmin):
    list_display = ('codigo', 'nombre', 'serie')
    list_filter = ('serie',)
    search_fields = ('codigo', 'nombre')


@admin.register(RegistroDeArchivo)
class RegistroDeArchivoAdmin(admin.ModelAdmin):
    list_display = (
        'numero_orden', 'unidad_documental', 'fecha_archivo', 
        'creado_por', 'ubicacion', 'soporte_fisico', 'soporte_electronico'
    )
    list_filter = ('soporte_fisico', 'soporte_electronico', 'fecha_archivo', 'creado_por')
    search_fields = ('numero_orden', 'unidad_documental', 'ubicacion', 'notas')
    readonly_fields = ('fecha_creacion',)
    fieldsets = (
        ('Información General', {
            'fields': ('numero_orden', 'codigo_serie', 'codigo_subserie', 'unidad_documental','fecha_archivo', 
                        'fecha_inicial', 'fecha_final', 'notas')
        }),
        ('Soporte', {
            'fields': ('soporte_fisico', 'soporte_electronico', 'caja', 'carpeta', 
                       'tomo_legajo_libro', 'numero_folios', 'cantidad', 'ubicacion')
        }),
        ('Información Electrónica', {
            'fields': ('cantidad_documentos_electronicos', 'tamano_documentos_electronicos')
        }),
        ('Metadatos', {
            'fields': ('creado_por', 'fecha_creacion')
        }),
    )


@admin.register(PermisoUsuarioSerie)
class PermisoUsuarioSerieAdmin(admin.ModelAdmin):
    list_display = ('usuario', 'serie', 'permiso_crear', 'permiso_editar', 'permiso_consultar', 'permiso_eliminar')
    list_filter = ('serie', 'usuario')


@admin.register(EntidadProductora)
class EntidadProductoraAdmin(admin.ModelAdmin):
    list_display = ('nombre',)
    search_fields = ('nombre',)


@admin.register(UnidadAdministrativa)
class UnidadAdministrativaAdmin(admin.ModelAdmin):
    list_display = ('nombre', 'entidad_productora')
    list_filter = ('entidad_productora',)
    search_fields = ('nombre', 'entidad_productora__nombre')


@admin.register(OficinaProductora)
class OficinaProductoraAdmin(admin.ModelAdmin):
    list_display = ('nombre', 'unidad_administrativa')
    list_filter = ('unidad_administrativa',)
    search_fields = ('nombre', 'unidad_administrativa__nombre')


@admin.register(Objeto)
class ObjetoAdmin(admin.ModelAdmin):
    list_display = ('nombre',)
    search_fields = ('nombre',)


@admin.register(FUID)
class FUIDAdmin(admin.ModelAdmin):
    list_display = ('id', 'entidad_productora', 'unidad_administrativa', 'oficina_productora', 'objeto', 'creado_por', 'fecha_creacion')
    list_filter = ('entidad_productora', 'unidad_administrativa', 'oficina_productora', 'objeto', 'creado_por')
    search_fields = ('id', 'entidad_productora__nombre', 'unidad_administrativa__nombre', 'oficina_productora__nombre', 'objeto__nombre')
    filter_horizontal = ('registros',)  # Para administrar el ManyToManyField


### .\documentos\apps.py ###
from django.apps import AppConfig


class DocumentosConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "documentos"


### .\documentos\crear_registros.py ###
# from documentos.models import RegistroDeArchivo, SerieDocumental, SubserieDocumental
# from django.contrib.auth.models import User
# from datetime import date, timedelta
# import random

# def crear_registros():
#     # Obtener usuario creador o crear uno si no existe
#     user, created = User.objects.get_or_create(username="testuser")
#     if created:
#         user.set_password("password123")
#         user.save()

#     # Obtener todas las series
#     series = SerieDocumental.objects.all()

#     # Verificar si hay series disponibles
#     if not series.exists():
#         print("No hay series disponibles. Por favor, crea series primero.")
#         return

#     # Generar registros
#     for i in range(100):  # Número de registros a crear
#         # Seleccionar una serie al azar
#         serie = random.choice(series)

#         # Seleccionar una subserie relacionada, si existe
#         subseries = SubserieDocumental.objects.filter(serie=serie)
#         subserie = random.choice(subseries) if subseries.exists() else None

#         # Crear el registro
#         RegistroDeArchivo.objects.create(
#             numero_orden=f"REG-{i+1:04d}",
#             codigo=f"CODE-{i+1:04d}",
#             codigo_serie=serie,
#             codigo_subserie=subserie,
#             unidad_documental=f"Unidad Documental {i+1}",
#             fecha_archivo=date.today() - timedelta(days=random.randint(0, 1000)),
#             soporte_fisico=random.choice([True, False]),
#             soporte_electronico=random.choice([True, False]),
#             tipo=random.choice(["Tipo A", "Tipo B", "Tipo C"]),
#             cantidad=random.randint(1, 100),
#             ubicacion=f"Ubicación {i+1}",
#             creado_por=user  # Asignar el usuario creador
#         )

#     print("Registros creados correctamente.")


from documentos.models import FichaPaciente
from django.contrib.auth.models import User
from datetime import date, timedelta
import random

def crear_fichas_pacientes():
    # Obtener usuario creador o crear uno si no existe
    user, created = User.objects.get_or_create(username="testuser")
    if created:
        user.set_password("password123")
        user.save()

    nombres = ["Carlos", "Ana", "Juan", "María", "Luis", "Sofía", "Pedro", "Lucía", "José", "Elena"]
    apellidos = ["García", "Martínez", "Rodríguez", "López", "Pérez", "Gómez", "Díaz", "Hernández", "Ruiz", "Morales"]

    tipos_identificacion = [
        "Cédula de Ciudadanía",
        "Tarjeta de Identidad",
        "Pasaporte",
        "Registro Civil"
    ]
    generos = ["Masculino", "Femenino"]

    # Crear 100 fichas de pacientes
    for i in range(100):
        # Generar nombre y apellido aleatorios
        primer_nombre = random.choice(nombres)
        segundo_nombre = random.choice(nombres) if random.random() > 0.5 else ""
        primer_apellido = random.choice(apellidos)
        segundo_apellido = random.choice(apellidos) if random.random() > 0.5 else ""

        # Generar fecha de nacimiento aleatoria
        fecha_nacimiento = date.today() - timedelta(days=random.randint(5000, 30000))

        # Crear ficha de paciente
        FichaPaciente.objects.create(
            primer_nombre=primer_nombre,
            segundo_nombre=segundo_nombre,
            primer_apellido=primer_apellido,
            segundo_apellido=segundo_apellido,
            num_identificacion=f"ID-{i+1:05d}",
            fecha_nacimiento=fecha_nacimiento,
            primer_nombre_padre=random.choice(nombres),
            segundo_nombre_padre=random.choice(nombres) if random.random() > 0.5 else "",
            primer_apellido_padre=random.choice(apellidos),
            segundo_apellido_padre=random.choice(apellidos) if random.random() > 0.5 else "",
            Numero_historia_clinica=f"HC-{i+1:05d}",
            caja=str(random.randint(1, 50)),
            carpeta=str(random.randint(1, 100)),
            tipo_identificacion=random.choice(tipos_identificacion),
            sexo=random.choice(generos),
            activo=random.choice([True, False])
        )

    print("Fichas de pacientes creadas correctamente.")

# from documentos.crear_registros import crear_fichas_pacientes
# crear_fichas_pacientes()


### .\documentos\forms.py ###
from django import forms
from .models import RegistroDeArchivo, SerieDocumental, SubserieDocumental
from django.utils.timezone import now
from django.forms import DateInput
from django import forms
from .models import FUID, RegistroDeArchivo
from django.utils.timezone import now, timedelta
from django.contrib.auth.models import User  # IMPORTAR User
# from .forms import FichaPacienteForm




class RegistroDeArchivoForm(forms.ModelForm):
    codigo_serie = forms.ModelChoiceField(
        queryset=SerieDocumental.objects.all(),
        empty_label="Seleccione una serie"
    )
    codigo_subserie = forms.ModelChoiceField(
        queryset=SubserieDocumental.objects.none(),
        empty_label="Seleccione una subserie"
    )

    # Hacemos opcionales los campos en el formulario
    caja = forms.CharField(required=False)
    carpeta = forms.CharField(required=False)
    tomo_legajo_libro = forms.CharField(required=False)
    numero_folios = forms.IntegerField(required=False)
    tipo = forms.CharField(required=False)
    cantidad = forms.IntegerField(required=False)
    ubicacion = forms.CharField(required=False)
    cantidad_documentos_electronicos = forms.IntegerField(required=False)
    tamano_documentos_electronicos = forms.CharField(required=False)

    class Meta:
        model = RegistroDeArchivo
        # Excluimos explícitamente el campo 'creado_por'
        exclude = ['creado_por']
        widgets = {
            'fecha_archivo': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'fecha_inicial': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'fecha_final': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if not self.instance.pk:  # Si es un nuevo registro
            self.fields['fecha_archivo'].initial = now().date()

        # Configuración dinámica del queryset de subseries
        if 'codigo_serie' in self.data:
            try:
                serie_id = int(self.data.get('codigo_serie'))
                self.fields['codigo_subserie'].queryset = SubserieDocumental.objects.filter(serie_id=serie_id)
            except (ValueError, TypeError):
                self.fields['codigo_subserie'].queryset = SubserieDocumental.objects.none()
        elif self.instance.pk and self.instance.codigo_serie:
            self.fields['codigo_subserie'].queryset = SubserieDocumental.objects.filter(serie_id=self.instance.codigo_serie.id)
        else:
            self.fields['codigo_subserie'].queryset = SubserieDocumental.objects.none()

    def clean(self):
        cleaned_data = super().clean()
        soporte_fisico = cleaned_data.get('soporte_fisico')
        soporte_electronico = cleaned_data.get('soporte_electronico')

        # Si soporte físico no está seleccionado, asignar valores predeterminados
        if not soporte_fisico:
            cleaned_data['caja'] = "N/A"
            cleaned_data['carpeta'] = "N/A"
            cleaned_data['tomo_legajo_libro'] = "N/A"
            cleaned_data['numero_folios'] = 0
            cleaned_data['tipo'] = "N/A"
            cleaned_data['cantidad'] = 0

        # Si soporte electrónico no está seleccionado, asignar valores predeterminados
        if not soporte_electronico:
            cleaned_data['ubicacion'] = "N/A"
            cleaned_data['cantidad_documentos_electronicos'] = 0
            cleaned_data['tamano_documentos_electronicos'] = "N/A"

        return cleaned_data

class FUIDForm(forms.ModelForm):
    # Campos y configuración del formulario
    usuario = forms.ModelChoiceField(
        queryset=User.objects.all(),
        required=False,
        label="Filtrar por Usuario",
        widget=forms.Select(attrs={'class': 'form-select'})
    )
    fecha_inicio = forms.DateField(
        required=False,
        label="Fecha Inicio",
        widget=forms.DateInput(attrs={'type': 'date', 'class': 'form-control'})
    )
    fecha_fin = forms.DateField(
        required=False,
        label="Fecha Fin",
        widget=forms.DateInput(attrs={'type': 'date', 'class': 'form-control'})
    )

    registros = forms.ModelMultipleChoiceField(
        queryset=RegistroDeArchivo.objects.none(),  
        widget=forms.CheckboxSelectMultiple,
        required=True,
        label="Registros Asociados"
    )

    elaborado_por_nombre = forms.CharField(
        required=False,
        max_length=255,
        label="Elaborado Por (Nombre)",
        widget=forms.TextInput(attrs={'class': 'form-control'})
    )
    elaborado_por_cargo = forms.CharField(
        required=False,
        max_length=255,
        label="Elaborado Por (Cargo)",
        widget=forms.TextInput(attrs={'class': 'form-control'})
    )
    elaborado_por_lugar = forms.CharField(
        required=False,
        max_length=255,
        label="Elaborado Por (Lugar)",
        widget=forms.TextInput(attrs={'class': 'form-control'})
    )
    elaborado_por_fecha = forms.DateField(
        required=False,
        label="Elaborado Por (Fecha)",
        widget=forms.DateInput(attrs={'type': 'date', 'class': 'form-control'})
    )

    entregado_por_nombre = forms.CharField(
        required=False,
        max_length=255,
        label="Entregado Por (Nombre)",
        widget=forms.TextInput(attrs={'class': 'form-control'})
    )
    entregado_por_cargo = forms.CharField(
        required=False,
        max_length=255,
        label="Entregado Por (Cargo)",
        widget=forms.TextInput(attrs={'class': 'form-control'})
    )
    entregado_por_lugar = forms.CharField(
        required=False,
        max_length=255,
        label="Entregado Por (Lugar)",
        widget=forms.TextInput(attrs={'class': 'form-control'})
    )
    entregado_por_fecha = forms.DateField(
        required=False,
        label="Entregado Por (Fecha)",
        widget=forms.DateInput(attrs={'type': 'date', 'class': 'form-control'})
    )

    recibido_por_nombre = forms.CharField(
        required=False,
        max_length=255,
        label="Recibido Por (Nombre)",
        widget=forms.TextInput(attrs={'class': 'form-control'})
    )
    recibido_por_cargo = forms.CharField(
        required=False,
        max_length=255,
        label="Recibido Por (Cargo)",
        widget=forms.TextInput(attrs={'class': 'form-control'})
    )
    recibido_por_lugar = forms.CharField(
        required=False,
        max_length=255,
        label="Recibido Por (Lugar)",
        widget=forms.TextInput(attrs={'class': 'form-control'})
    )
    recibido_por_fecha = forms.DateField(
        required=False,
        label="Recibido Por (Fecha)",
        widget=forms.DateInput(attrs={'type': 'date', 'class': 'form-control'})
    )

    class Meta:
        model = FUID
        fields = [
            'entidad_productora', 'unidad_administrativa', 'oficina_productora', 'objeto',
            'registros',
            'elaborado_por_nombre', 'elaborado_por_cargo', 'elaborado_por_lugar', 'elaborado_por_fecha',
            'entregado_por_nombre', 'entregado_por_cargo', 'entregado_por_lugar', 'entregado_por_fecha',
            'recibido_por_nombre', 'recibido_por_cargo', 'recibido_por_lugar', 'recibido_por_fecha'
        ]
        widgets = {
            'entidad_productora': forms.Select(attrs={'class': 'form-select'}),
            'unidad_administrativa': forms.Select(attrs={'class': 'form-select'}),
            'oficina_productora': forms.Select(attrs={'class': 'form-select'}),
            'objeto': forms.Select(attrs={'class': 'form-select'}),
        }

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)  # Usuario autenticado
        # No es necesario asignar self.instance aquí, ModelForm ya lo hace
        super().__init__(*args, **kwargs)

        # Configura el queryset de registros
        if self.instance and self.instance.pk:
            registros_actuales = self.instance.registros.all()
            registros_disponibles = RegistroDeArchivo.objects.filter(fuids__isnull=True)
            self.fields['registros'].queryset = registros_actuales | registros_disponibles
        else:
            self.fields['registros'].queryset = RegistroDeArchivo.objects.filter(fuids__isnull=True)


    

from django import forms
from .models import FichaPaciente

class FichaPacienteForm(forms.ModelForm):
    class Meta:
        model = FichaPaciente
        fields = '__all__'
        widgets = {
            'primer_nombre': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Ingresa el primer nombre',
                'autofocus': 'autofocus',  # Enfocar este campo automáticamente
            }),
            'segundo_nombre': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Ingresa el segundo nombre (opcional)',
            }),
            'primer_apellido': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Ingresa el primer apellido',
            }),
            'segundo_apellido': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Ingresa el segundo apellido (opcional)',
            }),
            'num_identificacion': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Número de identificación único',
            }),
            'fecha_nacimiento': forms.DateInput(attrs={
                'class': 'form-control',
                'type': 'date',  # Mostrar un selector de fecha
            }),
            'primer_nombre_padre': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Ingresa el primer nombre del padre',
            }),
            'segundo_nombre_padre': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Segundo nombre del padre (opcional)',
            }),
            'primer_apellido_padre': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Ingresa el primer apellido del padre',
            }),
            'segundo_apellido_padre': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Segundo apellido del padre (opcional)',
            }),
            'Numero_historia_clinica': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Número de historia clínica único',
            }),
            'caja': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Número de caja',
            }),
            'carpeta': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Número de carpeta',
            }), 
        }

    def clean_Numero_historia_clinica(self):
        numero_historia_clinica = self.cleaned_data.get('Numero_historia_clinica')
        if FichaPaciente.objects.filter(Numero_historia_clinica=numero_historia_clinica).exists():
            raise forms.ValidationError("El número de historia clínica ya está registrado. Por favor, verifica los datos.")
        return numero_historia_clinica

    def clean_num_identificacion(self):
        num_identificacion = self.cleaned_data.get('num_identificacion')
        if FichaPaciente.objects.filter(num_identificacion=num_identificacion).exists():
            raise forms.ValidationError("El número de identificación ya está registrado. Por favor, verifica los datos.")
        return num_identificacion

        




# hasta aca servia a las 4 `pm martes 10....................................................`
# class RegistroDeArchivoForm(forms.ModelForm):
#     codigo_serie = forms.ModelChoiceField(
#         queryset=SerieDocumental.objects.all(),
#         empty_label="Seleccione una serie"
#     )
#     codigo_subserie = forms.ModelChoiceField(
#         queryset=SubserieDocumental.objects.none(),
#         empty_label="Seleccione una subserie"
#     )

#     class Meta:
#         model = RegistroDeArchivo
#         fields = '__all__'
# .............................................................................................



# from django import forms
# from .models import RegistroDeArchivo, SubserieDocumental, SerieDocumental

# class RegistroDeArchivoForm(forms.ModelForm):
#     class Meta:
#         model = RegistroDeArchivo
#         fields = '__all__'

#     def __init__(self, *args, **kwargs):
#         super().__init__(*args, **kwargs)
#         self.fields['codigo_serie'].queryset = SerieDocumental.objects.all()
#         self.fields['codigo_subserie'].queryset = SubserieDocumental.objects.none()

#         if 'codigo_serie' in self.data:
#             try:
#                 serie_id = int(self.data.get('codigo_serie'))
#                 self.fields['codigo_subserie'].queryset = SubserieDocumental.objects.filter(serie_id=serie_id)
#             except (ValueError, TypeError):
#                 pass
#         elif self.instance.pk:
#             self.fields['codigo_subserie'].queryset = SubserieDocumental.objects.filter(serie=self.instance.codigo_serie)


### .\documentos\models.py ###
from django.db import models
from django.contrib.auth.models import User

class SerieDocumental(models.Model):
    codigo = models.CharField(max_length=50)
    nombre = models.CharField(max_length=255)

    def __str__(self):
        return f"{self.codigo} - {self.nombre}"

class SubserieDocumental(models.Model):
    codigo = models.CharField(max_length=50)
    nombre = models.CharField(max_length=255)
    serie = models.ForeignKey(SerieDocumental, on_delete=models.CASCADE)

    def __str__(self):
        return f"{self.codigo} - {self.nombre} (Serie: {self.serie.nombre})"


class EntidadProductora(models.Model):
    nombre = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.nombre


class UnidadAdministrativa(models.Model):
    nombre = models.CharField(max_length=255)
    entidad_productora = models.ForeignKey(EntidadProductora, on_delete=models.CASCADE, related_name='unidades')

    def __str__(self):
        return f"{self.nombre} ({self.entidad_productora.nombre})"


class OficinaProductora(models.Model):
    nombre = models.CharField(max_length=255)
    unidad_administrativa = models.ForeignKey(UnidadAdministrativa, on_delete=models.CASCADE, related_name='oficinas')

    def __str__(self):
        return f"{self.nombre} ({self.unidad_administrativa.nombre})"


class Objeto(models.Model):
    nombre = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.nombre


class FUID(models.Model):
    # Campos existentes
    entidad_productora = models.ForeignKey(EntidadProductora, on_delete=models.SET_NULL, null=True)
    unidad_administrativa = models.ForeignKey(UnidadAdministrativa, on_delete=models.SET_NULL, null=True)
    oficina_productora = models.ForeignKey(OficinaProductora, on_delete=models.SET_NULL, null=True)
    objeto = models.ForeignKey(Objeto, on_delete=models.SET_NULL, null=True)
    fecha_creacion = models.DateTimeField(auto_now_add=True)
    creado_por = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='fuids')
    registros = models.ManyToManyField('RegistroDeArchivo', related_name='fuids', blank=True)

    # Nuevos campos
    # Elaborado Por
    elaborado_por_nombre = models.CharField(max_length=255, null=True, blank=True)  # Nombres y apellidos
    elaborado_por_cargo = models.CharField(max_length=255, null=True, blank=True)   # Cargo
    elaborado_por_lugar = models.CharField(max_length=255, null=True, blank=True)   # Lugar
    elaborado_por_fecha = models.DateField(null=True, blank=True)                   # Fecha

    # Entregado
    entregado_por_nombre = models.CharField(max_length=255, null=True, blank=True)  # Nombres y apellidos
    entregado_por_cargo = models.CharField(max_length=255, null=True, blank=True)   # Cargo
    entregado_por_lugar = models.CharField(max_length=255, null=True, blank=True)   # Lugar
    entregado_por_fecha = models.DateField(null=True, blank=True)                   # Fecha

    # Recibido Por
    recibido_por_nombre = models.CharField(max_length=255, null=True, blank=True)   # Nombres y apellidos
    recibido_por_cargo = models.CharField(max_length=255, null=True, blank=True)    # Cargo
    recibido_por_lugar = models.CharField(max_length=255, null=True, blank=True)    # Lugar
    recibido_por_fecha = models.DateField(null=True, blank=True)                    # Fecha

    def __str__(self):
        return f"FUID #{self.id} - {self.entidad_productora.nombre if self.entidad_productora else 'Sin Entidad'}"



class RegistroDeArchivo(models.Model):  
    numero_orden = models.CharField(max_length=50)  # Identificador único
    codigo = models.CharField(max_length=50, blank=True, null=True)
    codigo_serie = models.ForeignKey(SerieDocumental, on_delete=models.CASCADE, related_name="registros")
    codigo_subserie = models.ForeignKey(SubserieDocumental, on_delete=models.CASCADE, blank=True, null=True, related_name="registros")
    unidad_documental = models.CharField(max_length=255)
    fecha_archivo = models.DateField(blank=True, null=True)
    fecha_inicial = models.DateField(blank=True, null=True)
    fecha_final = models.DateField(blank=True, null=True)
    soporte_fisico = models.BooleanField(default=False)
    soporte_electronico = models.BooleanField(default=False)
    caja = models.CharField(max_length=50, blank=True, null=True)
    carpeta = models.CharField(max_length=50, blank=True, null=True)
    tomo_legajo_libro = models.CharField(max_length=50, blank=True, null=True)
    numero_folios = models.IntegerField(blank=True, null=True)
    tipo = models.CharField(max_length=100, blank=True, null=True)
    cantidad = models.IntegerField(blank=True, null=True)
    ubicacion = models.CharField(max_length=255)
    cantidad_documentos_electronicos = models.IntegerField(null=True, blank=True)
    tamano_documentos_electronicos = models.CharField(max_length=50, null=True, blank=True)
    notas = models.TextField(blank=True, null=True)
    creado_por = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    fecha_creacion = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.numero_orden} - {self.unidad_documental or 'Sin Nombre'}"


class PermisoUsuarioSerie(models.Model):
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    serie = models.ForeignKey(SerieDocumental, on_delete=models.CASCADE)
    permiso_crear = models.BooleanField(default=False)
    permiso_editar = models.BooleanField(default=False)
    permiso_consultar = models.BooleanField(default=True)
    permiso_eliminar = models.BooleanField(default=False)

    def __str__(self):
        return f"Permisos de {self.usuario.username} sobre {self.serie.nombre}"


class FichaPaciente (models.Model):
    consecutivo = models.AutoField(primary_key=True)
    primer_nombre = models.CharField(max_length=50)
    segundo_nombre = models.CharField(max_length=50, blank=True, null=True)
    primer_apellido = models.CharField(max_length=50)
    segundo_apellido = models.CharField(max_length=50, blank=True, null=True)
    num_identificacion = models.CharField(max_length=20, unique=True)
    fecha_nacimiento = models.DateField()
    primer_nombre_padre = models.CharField(max_length=50, blank=True, null=True)
    segundo_nombre_padre = models.CharField(max_length=50, blank=True, null=True)
    primer_apellido_padre = models.CharField(max_length=50, blank=True, null=True)
    segundo_apellido_padre = models.CharField(max_length=50, blank=True, null=True)
    Numero_historia_clinica = models.CharField(max_length=20, unique=True)
    caja = models.CharField(max_length=20)
    carpeta = models.CharField(max_length=20)
    tipo_identificacion = models.CharField(max_length=20, default='Cedula de Ciudadania')
    sexo = models.CharField(max_length=10, default='Masculino')
    activo = models.BooleanField(default=True)

    def __str__(self):
        return f"Ficha del paciente  {self.primer_nombre} con identificacion {self.num_identificacion}"
    






# from django.db import models
# from django.contrib.auth.models import User

# class SerieDocumental(models.Model):
#     codigo = models.CharField(max_length=50)
#     nombre = models.CharField(max_length=255)

# class SubserieDocumental(models.Model):
#     codigo = models.CharField(max_length=50)
#     nombre = models.CharField(max_length=255)
#     serie = models.ForeignKey(SerieDocumental, on_delete=models.CASCADE)

# class RegistroDeArchivo(models.Model):
#     numero_orden = models.CharField(max_length=50)
#     codigo_serie = models.CharField(max_length=50)
#     codigo_subserie = models.CharField(max_length=50, blank=True, null=True)
#     unidad_documental = models.CharField(max_length=255)
#     fecha_archivo = models.DateField()
#     fecha_creacion = models.DateTimeField(auto_now_add=True)
#     creado_por = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
#     soporte_fisico = models.BooleanField(default=False)
#     soporte_electronico = models.BooleanField(default=False)
#     ubicacion = models.CharField(max_length=255)
#     cantidad_documentos_electronicos = models.IntegerField(null=True, blank=True)
#     tamano_documentos_electronicos = models.CharField(max_length=50, null=True, blank=True)
#     notas = models.TextField(blank=True, null=True)

# class PermisoUsuarioSerie(models.Model):
#     usuario = models.ForeignKey(User, on_delete=models.CASCADE)
#     serie = models.ForeignKey(SerieDocumental, on_delete=models.CASCADE)
#     permiso_crear = models.BooleanField(default=False)
#     permiso_editar = models.BooleanField(default=False)
#     permiso_consultar = models.BooleanField(default=True)
#     permiso_eliminar = models.BooleanField(default=False)



### .\documentos\services.py ###
from django.db.models import Count
from django.db.models.functions import TruncMonth
from django.utils.timezone import now
from .models import FUID, RegistroDeArchivo, FichaPaciente


def obtener_fuids_por_usuario():
    """
    Devuelve la cantidad total de FUIDs creados por cada usuario.
    """
    return FUID.objects.values('creado_por__username').annotate(total=Count('id')).order_by('-total')


def obtener_registros_mensuales():
    """
    Devuelve la cantidad de registros creados agrupados por mes (último año).
    """
    return (
        RegistroDeArchivo.objects.filter(fecha_creacion__year=now().year)
        .annotate(mes=TruncMonth('fecha_creacion'))
        .values('mes')
        .annotate(total=Count('id'))
        .order_by('mes')
    )


def obtener_pacientes_por_genero_estado():
    """
    Devuelve la cantidad de pacientes agrupados por género y estado (activo/inactivo).
    """
    return FichaPaciente.objects.values('sexo', 'activo').annotate(total=Count('id'))


### .\documentos\tests.py ###
from django.test import TestCase

# Create your tests here.


### .\documentos\urls.py ###
from django.urls import path
from django.contrib.auth import views as auth_views
from . import views
from .views import FUIDCreateView, FUIDUpdateView, lista_fuids
from django.urls import path
from .views import detalle_fuid
from .views import crear_ficha_paciente
from .views import lista_fichas_paciente
from .views import EditarFichaPaciente, detalle_ficha_paciente
from .views import ListaFichasAPIView
from .views import export_fuid_to_excel
from .views import estadisticas_fuids, estadisticas_registros, estadisticas_pacientes,  pagina_estadisticas, obtener_usuarios
from django.views.generic import TemplateView






# from .views import export_fuids_to_excel





urlpatterns = [
    path('', views.lista_registros, name='lista_registros'),  # Página principal de registros
    path('nuevo/', views.crear_registro, name='crear_registro'),
    path('<int:pk>/editar/', views.editar_registro, name='editar_registro'),
    path('<int:pk>/eliminar/', views.eliminar_registro, name='eliminar_registro'),
    path('cargar_subseries/', views.cargar_subseries, name='cargar_subseries'),
    path('cargar_series/', views.cargar_series, name='cargar_series'),
    path('login/', auth_views.LoginView.as_view(template_name='registration/login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
    path('registros/completo/', views.lista_completa_registros, name='lista_completa_registros'),
    path('fuids/', views.lista_fuids, name='lista_fuids'),
    # path('fuids/', lista_fuids, name='lista_fuids'),
    path('fuids/create/', FUIDCreateView.as_view(), name='crear_fuid'),
    path('fuids/edit/<int:pk>/', FUIDUpdateView.as_view(), name='editar_fuid'),
    path('fuids/detalle/<int:pk>/', detalle_fuid, name='detalle_fuid'),
    path('welcome/', views.welcome_view, name='welcome'),
    path('crear-ficha/', crear_ficha_paciente, name='crear_ficha'),
    path('lista-fichas/', lista_fichas_paciente, name='lista_fichas'),
    path('editar-ficha/<int:consecutivo>/', EditarFichaPaciente.as_view(), name='editar_ficha'),
    path('detalle-ficha/<int:consecutivo>/', detalle_ficha_paciente, name='detalle_ficha'),
    path('api/lista-fichas/', ListaFichasAPIView.as_view(), name='api_lista_fichas'),
    path('fuid/<int:pk>/export-excel/', export_fuid_to_excel, name='export_fuid_to_excel'),
      # Otras rutas de tu app...
    path('estadisticas/fuids/', estadisticas_fuids, name='estadisticas_fuids'),
    path('estadisticas/registros/', estadisticas_registros, name='estadisticas_registros'),
    path('estadisticas/pacientes/', estadisticas_pacientes, name='estadisticas_pacientes'),
    path('estadisticas/', pagina_estadisticas, name='pagina_estadisticas'),
    path('api/usuarios/', obtener_usuarios, name='obtener_usuarios'),
    # path('adminlte/', TemplateView.as_view(template_name="admin-lte/index.html"), name="adminlte_index"),
    path('', TemplateView.as_view(template_name="adminlte/base.html"), name="home"),




    






    
    


    # path('fuids/<int:fuid_id>/exportar/', exportar_fuid_excel, name='exportar_fuid_excel'),
    # path('export/fuids/', export_fuids_to_excel, name='export_fuids'),


   # path('login/', views.login_view, name='login'),
]


### .\documentos\views.py ###
from django.db import IntegrityError
from django.shortcuts import render, redirect
from .models import RegistroDeArchivo
from .forms import RegistroDeArchivoForm
from django.http import JsonResponse
from .models import SubserieDocumental
from .models import SerieDocumental
from django.contrib.auth.decorators import login_required
from django.urls import reverse_lazy
from django.views.generic.edit import CreateView, UpdateView
from django.shortcuts import get_object_or_404
from django.contrib.auth.mixins import LoginRequiredMixin
from .models import FUID, RegistroDeArchivo
from django.utils.timezone import now, timedelta
from .forms import FUIDForm
from django.http import HttpResponse
from openpyxl import Workbook
from openpyxl.styles import Alignment, Font
from .models import FUID, RegistroDeArchivo
from django.contrib import messages


# from .models import SerieDocumental

# print(SerieDocumental)

@login_required
def cargar_series(request):
    series = SerieDocumental.objects.all().values('codigo', 'nombre')
    return JsonResponse(list(series), safe=False)
@login_required
def cargar_subseries(request):
    serie_id = request.GET.get('serie_id')  # esto será el id (entero)
    subseries = SubserieDocumental.objects.filter(serie_id=serie_id).values('id', 'nombre')
    return JsonResponse(list(subseries), safe=False)



@login_required
# Listar registros
def lista_registros(request):
    registros = RegistroDeArchivo.objects.all()
    return render(request, 'registro_list.html', {'registros': registros})

@login_required
def crear_registro(request):
    print("Vista 'crear_registro' ejecutándose...")  # Confirmación de ejecución
    if request.method == 'POST':
        print("Datos POST enviados:", request.POST)  # Imprime los datos enviados en el formulario

        form = RegistroDeArchivoForm(request.POST)
        if form.is_valid():
            print("Formulario válido")
            registro = form.save(commit=False)  # Crea el registro sin guardarlo todavía
            registro.creado_por = request.user  # Asigna el usuario autenticado al campo creado_por
            registro.save()  # Guarda el registro con el usuario asignado
            return redirect('lista_registros')
        else:
            print("Errores del formulario:", form.errors)  # Muestra los errores de validación

    else:
        print("Método GET recibido")
        form = RegistroDeArchivoForm()
        form.fields['codigo_subserie'].queryset = SubserieDocumental.objects.none()

    return render(request, 'registro_form.html', {'form': form})


def editar_registro(request, pk):
    registro = RegistroDeArchivo.objects.get(id=pk)
    if request.method == 'POST':
        form = RegistroDeArchivoForm(request.POST, instance=registro)
        
        # Recuperar el valor de la serie seleccionada para actualizar las subseries
        codigo_serie = request.POST.get('codigo_serie')
        if codigo_serie:
            form.fields['codigo_subserie'].queryset = SubserieDocumental.objects.filter(serie_id=codigo_serie)
        
        if form.is_valid():
            form.save()
            return redirect('lista_registros')
    else:
        form = RegistroDeArchivoForm(instance=registro)
        # Establecer el queryset de subseries basándose en la serie ya asociada al registro
        if registro.codigo_serie:
            form.fields['codigo_subserie'].queryset = SubserieDocumental.objects.filter(serie=registro.codigo_serie)
        else:
            form.fields['codigo_subserie'].queryset = SubserieDocumental.objects.none()




    return render(request, 'registro_form.html', {'form': form})


@login_required
def eliminar_registro(request, pk):
    registro = RegistroDeArchivo.objects.get(id=pk)
    if registro.creado_por != request.user:
        return HttpResponseForbidden("No tienes permiso para eliminar este registro.")
    registro.delete()
    return redirect('lista_registros')

@login_required
def lista_completa_registros(request):
    registros = RegistroDeArchivo.objects.all()
    return render(request, 'registro_completo.html', {'registros': registros})



# Vista para crear un FUID
class FUIDCreateView(LoginRequiredMixin, CreateView):
    model = FUID
    form_class = FUIDForm
    template_name = "fuid_form.html"
    success_url = reverse_lazy("lista_fuids")

    def get_form(self, *args, **kwargs):
        form = super().get_form(*args, **kwargs)

        # Obtener filtros de la solicitud
        usuario = self.request.GET.get("usuario")
        fecha_inicio = self.request.GET.get("fecha_inicio")
        fecha_fin = self.request.GET.get("fecha_fin")

        # Construir queryset dinámico
        registros = RegistroDeArchivo.objects.filter(fuids__isnull=True)

        if usuario:
            registros = registros.filter(creado_por_id=usuario)
        if fecha_inicio:
            registros = registros.filter(fecha_creacion__gte=fecha_inicio)
        if fecha_fin:
            registros = registros.filter(fecha_creacion__lte=fecha_fin)

        form.fields['registros'].queryset = registros
        return form

    def form_valid(self, form):
        # Asignar automáticamente el usuario que crea el FUID
        form.instance.creado_por = self.request.user
        fuid = form.save()

        # Asociar registros seleccionados al FUID
        registros = form.cleaned_data["registros"]
        fuid.registros.set(registros)

        return super().form_valid(form)



from .forms import FUIDForm

class FUIDUpdateView(UpdateView):
    model = FUID
    form_class = FUIDForm
    template_name = "fuid_form.html"
    success_url = reverse_lazy("lista_fuids")

    def get_form_kwargs(self):
        # Pasa argumentos adicionales al formulario
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user  # Usuario autenticado
        return kwargs

    def form_valid(self, form):
        # Asigna los registros seleccionados al FUID
        fuid = form.save()
        registros = form.cleaned_data.get("registros")
        fuid.registros.set(registros)
        return super().form_valid(form)
    
@login_required
def lista_fuids(request):
    fuids = FUID.objects.all()  # Obtén todos los FUIDs
    return render(request, 'fuid_list.html', {'fuids': fuids})

@login_required
def detalle_fuid(request, pk):
    fuid = get_object_or_404(FUID, pk=pk)
    registros = fuid.registros.all()
    return render(request, 'fuid_complete_list.html', {'fuid': fuid, 'registros': registros})

from django.shortcuts import render

def welcome_view(request):
    return render(request, 'welcome.html')

from .forms import FichaPacienteForm

def crear_ficha_paciente(request):
    if request.method == 'POST':
        form = FichaPacienteForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Ficha del paciente registrada exitosamente.')
            return redirect('crear_ficha')  # Redirige a la misma página o a otra URL
        else:
            # Personalizar nombres de campos para los errores
            for field, errors in form.errors.items():
                if field == 'num_identificacion':
                    field_name = 'Número de Identificación'
                elif field == 'Numero_historia_clinica':
                    field_name = 'Número de Historia Clínica'
                else:
                    field_name = field  # En caso de que falte algún campo
                for error in errors:
                    messages.error(request, f"{field_name}: {error}")
    else:
        form = FichaPacienteForm()
    return render(request, 'ficha_paciente_form.html', {'form': form})



from django.shortcuts import render
from .models import FichaPaciente

def lista_fichas_paciente(request):
    fichas = FichaPaciente.objects.all()
    return render(request, 'lista_fichas_paciente.html', {'fichas': fichas})

class EditarFichaPaciente(UpdateView):
    model = FichaPaciente
    fields = '__all__'
    template_name = 'ficha_paciente_form.html'
    success_url = reverse_lazy('lista_fichas')
    pk_url_kwarg = 'consecutivo'  # Usar 'consecutivo' en lugar de 'pk'



from django.shortcuts import get_object_or_404

def detalle_ficha_paciente(request, consecutivo):
    ficha = get_object_or_404(FichaPaciente, consecutivo=consecutivo)
    return render(request, 'detalle_ficha_paciente.html', {'ficha': ficha})


from rest_framework.views import APIView
from rest_framework.response import Response
from django.core.paginator import Paginator
from .models import FichaPaciente

from rest_framework.views import APIView
from rest_framework.response import Response
from django.db.models import Q
from django.core.paginator import Paginator
from .models import FichaPaciente

class ListaFichasAPIView(APIView):
    def get(self, request):
        campo_busqueda = request.GET.get('campo_busqueda', None)
        valor_busqueda = request.GET.get('valor_busqueda', None)
        fecha_inicio = request.GET.get('fecha_inicio', None)
        fecha_fin = request.GET.get('fecha_fin', None)
        start = int(request.GET.get('start', 0))
        length = int(request.GET.get('length', 250))

        queryset = FichaPaciente.objects.all()

        # Filtrar por campo seleccionado
        if campo_busqueda and valor_busqueda:
            if campo_busqueda in ['consecutivo', 'num_identificacion', 'numero_historia_clinica']:
                queryset = queryset.filter(**{campo_busqueda: valor_busqueda})
            elif campo_busqueda == 'estado':
                queryset = queryset.filter(activo=(valor_busqueda.lower() == 'activo'))
            else:
                queryset = queryset.filter(**{f"{campo_busqueda}__icontains": valor_busqueda})

        # Filtrar por rango de fechas
        if fecha_inicio and fecha_fin:
            queryset = queryset.filter(fecha_nacimiento__range=[fecha_inicio, fecha_fin])

        # Paginación
        paginator = Paginator(queryset, length)
        fichas = paginator.get_page(start // length + 1).object_list

        # Formato JSON para DataTables
        data = [{
            "consecutivo": ficha.consecutivo,
            "nombre_completo": f"{ficha.primer_nombre} {ficha.segundo_nombre} {ficha.primer_apellido} {ficha.segundo_apellido}",
            "tipo_identificacion": ficha.tipo_identificacion,
            "num_identificacion": ficha.num_identificacion,
            "sexo": ficha.sexo,
            "estado": ficha.activo,
            "fecha_nacimiento": ficha.fecha_nacimiento.strftime("%Y-%m-%d"),
            "numero_historia_clinica": ficha.Numero_historia_clinica
        } for ficha in fichas]

        return Response({
            "draw": request.GET.get('draw', 1),
            "recordsTotal": queryset.count(),
            "recordsFiltered": queryset.count(),
            "data": data
        })





#............ exportaciones..............................




import openpyxl
from django.http import HttpResponse
from .models import FUID

from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment

from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment

from django.http import HttpResponse
import openpyxl
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment

# muchas librerias aaaaaaaaaaa


from openpyxl.styles import Alignment, Border, Side, PatternFill

from django.http import HttpResponse
import openpyxl
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment, Border, Side, PatternFill
from openpyxl.drawing.image import Image

from django.http import HttpResponse
import openpyxl
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment, Border, Side, PatternFill
from openpyxl.drawing.image import Image

from django.http import HttpResponse
import openpyxl
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment, Border, Side, PatternFill
from openpyxl.drawing.image import Image

from django.http import HttpResponse
import openpyxl
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment, Border, Side, PatternFill
from openpyxl.drawing.image import Image

from django.http import HttpResponse
import openpyxl
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment, Border, Side, PatternFill
from openpyxl.drawing.image import Image

from django.http import HttpResponse
import openpyxl
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment, Border, Side, PatternFill
from openpyxl.drawing.image import Image

def export_fuid_to_excel(request, pk):
    # Obtener el FUID específico
    fuid = FUID.objects.get(pk=pk)

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = f"FUID #{fuid.id}"

    # Función para truncar valores largos
    def truncate_value(value, max_length=30):
        if not value:
            return "N/A"
        value = str(value)
        return value if len(value) <= max_length else value[:max_length - 3] + "..."

    # Crear estilos
    border = Border(
        left=Side(border_style="thin"),
        right=Side(border_style="thin"),
        top=Side(border_style="thin"),
        bottom=Side(border_style="thin")
    )
    header_fill = PatternFill(start_color="EEECE1", end_color="EEECE1", fill_type="solid")

    # Combinar celdas para la imagen
    ws.merge_cells(start_row=1, start_column=1, end_row=6, end_column=22)

    # Insertar la imagen
    img_path = r"D:\descargas d\xtz\pino-d-angio-c92c3fc03f2f716d1835fcf5b169efc11833deab\hospital_document_management\documentos\templates\images\fuid_logo.png"
    img = Image(img_path)
    img.width = 1000
    img.height = 120
    ws.add_image(img, "A1")

    # Mover el cursor de escritura a la fila 7 para continuar con el contenido
    current_row = 7

    # Encabezados de datos generales
    ws.cell(row=current_row, column=1, value="Campo")
    ws.cell(row=current_row, column=2, value="Valor")
    ws.cell(row=current_row, column=17, value="AÑO")
    ws.cell(row=current_row, column=18, value="MES")
    ws.cell(row=current_row, column=19, value="DÍA")
    ws.cell(row=current_row, column=20, value="N.T.")
    current_row += 1

    # Datos generales del FUID
    fuid_data = [
        ("Entidad Productora", fuid.entidad_productora.nombre if fuid.entidad_productora else "N/A", fuid.fecha_creacion.year, fuid.fecha_creacion.month, fuid.fecha_creacion.day, ""),
        ("Unidad Administrativa", fuid.unidad_administrativa.nombre if fuid.unidad_administrativa else "N/A", "", "", "", ""),
        ("Oficina Productora", fuid.oficina_productora.nombre if fuid.oficina_productora else "N/A", "", "", "", ""),
        ("Objeto", fuid.objeto.nombre if fuid.objeto else "N/A", "", "", "", ""),
    ]
    for row_data in fuid_data:
        ws.cell(row=current_row, column=1, value=row_data[0])  # Campo
        ws.cell(row=current_row, column=2, value=row_data[1])  # Valor
        ws.cell(row=current_row, column=17, value=row_data[2])  # AÑO
        ws.cell(row=current_row, column=18, value=row_data[3])  # MES
        ws.cell(row=current_row, column=19, value=row_data[4])  # DÍA
        ws.cell(row=current_row, column=20, value=row_data[5])  # N.T.
        current_row += 1

    # Aplicar bordes solo a celdas con contenido
    for row in ws.iter_rows(min_row=7, max_row=current_row-1):
        for cell in row:
            if cell.value:  # Aplica bordes solo si hay contenido
                cell.border = border

    # Espacio antes de la sección de registros
    current_row += 1
    ws.cell(row=current_row, column=1, value="")
    current_row += 1

    # Encabezados de los registros (sin "Fecha Archivo")
    headers = [
        "N° Orden", "Código", "Código Serie", "Código Subserie", "Unidad Documental",
        "Fecha Inicial", "Fecha Final", "Soporte Físico", "Soporte Electrónico",
        "Caja", "Carpeta", "Tomo/Legajo/Libro", "N° Folios", "Tipo", "Cantidad",
        "Ubicación", "Cantidad Electrónicos", "Tamaño Electrónico", "Notas", "Creado Por", "Fecha Creación"
    ]
    start_row = current_row + 1
    for col_idx, header in enumerate(headers, start=1):
        col_letter = get_column_letter(col_idx)
        ws.merge_cells(start_row=start_row, start_column=col_idx, end_row=start_row+3, end_column=col_idx)
        cell = ws[f"{col_letter}{start_row}"]
        cell.value = header
        cell.alignment = Alignment(horizontal="center", vertical="center")
        cell.fill = header_fill
        if cell.value:  # Aplica bordes solo si hay contenido
            cell.border = border

    # Mover el current_row debajo de las cabeceras
    current_row = start_row + 4

    # Agregar registros asociados (sin "Fecha Archivo")
    registros = fuid.registros.all()
    if registros.exists():
        for registro in registros:
            row_data = [
                registro.numero_orden,
                truncate_value(registro.codigo or "N/A"),
                truncate_value(registro.codigo_serie.nombre if registro.codigo_serie else "N/A"),
                truncate_value(registro.codigo_subserie.nombre if registro.codigo_subserie else "N/A"),
                truncate_value(registro.unidad_documental),
                registro.fecha_inicial.strftime('%Y-%m-%d') if registro.fecha_inicial else "N/A",
                registro.fecha_final.strftime('%Y-%m-%d') if registro.fecha_final else "N/A",
                "Sí" if registro.soporte_fisico else "No",
                "Sí" if registro.soporte_electronico else "No",
                truncate_value(registro.caja or "N/A"),
                truncate_value(registro.carpeta or "N/A"),
                truncate_value(registro.tomo_legajo_libro or "N/A"),
                registro.numero_folios or "N/A",
                truncate_value(registro.tipo or "N/A"),
                registro.cantidad or "N/A",
                truncate_value(registro.ubicacion),
                registro.cantidad_documentos_electronicos or "N/A",
                truncate_value(registro.tamano_documentos_electronicos or "N/A"),
                truncate_value(registro.notas or "N/A"),
                registro.creado_por.username if registro.creado_por else "N/A",
                registro.fecha_creacion.strftime('%Y-%m-%d %H:%M'),
            ]
            for col_idx, val in enumerate(row_data, start=1):
                c = ws.cell(row=current_row, column=col_idx, value=val)
                if c.value:  # Aplica bordes solo si hay contenido
                    c.border = border
            current_row += 1
    else:
        ws.cell(row=current_row, column=1, value="Sin registros asociados")
        current_row += 1

    # Espacio antes de la sección de roles
    current_row += 1

    # Datos de roles
    roles_data = [
        ["Elaborado Por (Nombre)", truncate_value(fuid.elaborado_por_nombre or "N/A"), 
         "Entregado Por (Nombre)", truncate_value(fuid.entregado_por_nombre or "N/A"), 
         "Recibido Por (Nombre)", truncate_value(fuid.recibido_por_nombre or "N/A")],
        ["Elaborado Por (Cargo)", truncate_value(fuid.elaborado_por_cargo or "N/A"), 
         "Entregado Por (Cargo)", truncate_value(fuid.entregado_por_cargo or "N/A"), 
         "Recibido Por (Cargo)", truncate_value(fuid.recibido_por_cargo or "N/A")],
        ["Elaborado Por (Lugar)", truncate_value(fuid.elaborado_por_lugar or "N/A"), 
         "Entregado Por (Lugar)", truncate_value(fuid.entregado_por_lugar or "N/A"), 
         "Recibido Por (Lugar)", truncate_value(fuid.recibido_por_lugar or "N/A")],
        ["Firma", "", "Firma", "", "Firma", ""],
        ["Lugar", "", "Lugar", "", "Lugar", ""],
        ["Elaborado Por (Fecha)", fuid.elaborado_por_fecha.strftime('%Y-%m-%d') if fuid.elaborado_por_fecha else "N/A",
         "Entregado Por (Fecha)", fuid.entregado_por_fecha.strftime('%Y-%m-%d') if fuid.entregado_por_fecha else "N/A",
         "Recibido Por (Fecha)", fuid.recibido_por_fecha.strftime('%Y-%m-%d') if fuid.recibido_por_fecha else "N/A"],
    ]

    # Asegurar bordes para todas las celdas de roles (rango expandido)
    start_col = 1  # Columna inicial para los datos de roles
    end_col = 10  # Aumentamos el rango de columnas ocupadas
    for row_idx, row_data in enumerate(roles_data, start=current_row):
        for col_idx, val in enumerate(row_data, start=start_col):
            c = ws.cell(row=row_idx, column=col_idx, value=val)
            c.border = border  # Aplicar bordes incluso si está vacío
        current_row += 1

    # Ajustar el ancho de las columnas automáticamente
    for column_cells in ws.columns:
        max_length = 0
        column_letter = get_column_letter(column_cells[0].column)
        for cell in column_cells:
            try:
                if cell.value:
                    max_length = max(max_length, len(str(cell.value)))
            except:
                pass
        adjusted_width = max_length + 2
        ws.column_dimensions[column_letter].width = adjusted_width

    # Configurar la respuesta HTTP
    response = HttpResponse(
        content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    response['Content-Disposition'] = f'attachment; filename=FUID_{fuid.id}.xlsx'

    wb.save(response)
    return response

from django.shortcuts import render
from django.http import JsonResponse
from django.db.models import Count, Avg, Q
from .models import FichaPaciente, RegistroDeArchivo, FUID
from datetime import date, datetime

def calcular_edad(fecha_nacimiento):
    """
    Calcula la edad actual basada en la fecha de nacimiento.
    """
    if fecha_nacimiento:
        hoy = date.today()
        return hoy.year - fecha_nacimiento.year - ((hoy.month, hoy.day) < (fecha_nacimiento.month, fecha_nacimiento.day))
    return None

def estadisticas_pacientes(request):
    """
    API para devolver estadísticas de pacientes considerando varios atributos.
    """
    usuario = request.GET.get('usuario')
    pacientes = FichaPaciente.objects.all()

    if usuario:
        pacientes = pacientes.filter(creado_por__username=usuario)

    # Calcular edades
    edades = [calcular_edad(p.fecha_nacimiento) for p in pacientes if p.fecha_nacimiento]

    # Clasificar por grupos de edad
    grupos_edad = {
        "0-18": sum(1 for e in edades if e <= 18),
        "19-35": sum(1 for e in edades if 19 <= e <= 35),
        "36-60": sum(1 for e in edades if 36 <= e <= 60),
        "60+": sum(1 for e in edades if e > 60)
    }

    datos = {
        'total_pacientes': pacientes.count(),
        'por_genero': list(pacientes.values('sexo').annotate(cantidad=Count('sexo'))),
        'por_tipo_identificacion': list(pacientes.values('tipo_identificacion').annotate(cantidad=Count('tipo_identificacion'))),
        'activos': pacientes.filter(activo=True).count(),
        'promedio_edad': round(sum(edades) / len(edades), 2) if edades else None,
        'grupos_edad': grupos_edad
    }

    return JsonResponse(datos, safe=False)


def estadisticas_registros(request):
    """
    API para devolver estadísticas de registros, organizados por series documentales y tipos.
    """
    try:
        fecha_inicio = request.GET.get('fecha_inicio')
        fecha_fin = request.GET.get('fecha_fin')
        registros = RegistroDeArchivo.objects.all()

        # Filtrar por rango de fechas si se proporcionan
        if fecha_inicio and fecha_fin:
            fecha_inicio = datetime.strptime(fecha_inicio, '%Y-%m-%d')
            fecha_fin = datetime.strptime(fecha_fin, '%Y-%m-%d')
            registros = registros.filter(fecha_archivo__range=(fecha_inicio, fecha_fin))

        # Generar estadísticas
        datos = {
            'total_registros': registros.count(),
            'por_serie': list(
                registros.values('codigo_serie__nombre').annotate(cantidad=Count('id'))
            ),
            'por_soporte': list(
                registros.values('soporte_fisico', 'soporte_electronico').annotate(cantidad=Count('id'))
            ),
            'por_tipo': list(
                registros.values('tipo').annotate(cantidad=Count('id'))
            ),
        }

        return JsonResponse(datos, safe=False)
    except Exception as e:
        print("Error en estadisticas_registros:", e)
        return JsonResponse({"error": str(e)}, status=500)




def estadisticas_fuids(request):
    """
    API para devolver estadísticas de FUIDs, organizados por oficinas productoras.
    """
    usuario = request.GET.get('usuario')
    fuids = FUID.objects.all()

    if usuario:
        fuids = fuids.filter(creado_por__username=usuario)

    datos = {
        'total_fuids': fuids.count(),
        'por_oficina': list(fuids.values('oficina_productora__nombre').annotate(cantidad=Count('id'))),
        'por_objeto': list(fuids.values('objeto__nombre').annotate(cantidad=Count('id'))),
        'por_entidad': list(fuids.values('entidad_productora__nombre').annotate(cantidad=Count('id'))),
    }

    return JsonResponse(datos, safe=False)


def pagina_estadisticas(request):
    """
    Página principal para mostrar gráficos de las estadísticas.
    """
    return render(request, 'pagina_estadisticas.html')

from django.contrib.auth.models import User
from django.http import JsonResponse

def obtener_usuarios(request):
    usuarios = User.objects.values('username')
    return JsonResponse(list(usuarios), safe=False)


















# from django.http import HttpResponse
# from openpyxl import Workbook
# from openpyxl.styles import Alignment, Font
# from openpyxl.utils import get_column_letter
# from openpyxl.cell.cell import MergedCell
# from .models import FUID, RegistroDeArchivo


# from openpyxl import Workbook
# from openpyxl.styles import Alignment, Font
# from django.http import HttpResponse
# from .models import FUID

# def export_fuids_to_excel(request):
#     # Crear un libro de Excel y hoja activa
#     wb = Workbook()
#     ws = wb.active
#     ws.title = "Exportación FUIDs"

#     # Definir los encabezados principales
#     headers = ["ENTIDAD PRODUCTORA", "UNIDAD ADMINISTRATIVA", "OFICINA PRODUCTORA", "OBJETO"]
#     starting_row = 8  # Comenzamos desde la fila A8
#     font_bold = Font(bold=True)
#     alignment_center = Alignment(horizontal="center", vertical="center")

#     # Escribir encabezados en la columna A (A8, A9, A10, A11)
#     for i, header in enumerate(headers, start=starting_row):
#         cell = ws.cell(row=i, column=1, value=header)
#         cell.font = font_bold
#         cell.alignment = alignment_center

#     # Obtener los FUIDs de la base de datos
#     fuids = FUID.objects.all()

#     # Agregar los datos de los FUIDs en columnas horizontales
#     for col_index, fuid in enumerate(fuids, start=2):  # Columnas empiezan en B
#         ws.cell(row=8, column=col_index, value=fuid.entidad_productora.nombre if fuid.entidad_productora else "N/A")
#         ws.cell(row=9, column=col_index, value=fuid.unidad_administrativa.nombre if fuid.unidad_administrativa else "N/A")
#         ws.cell(row=10, column=col_index, value=fuid.oficina_productora.nombre if fuid.oficina_productora else "N/A")
#         ws.cell(row=11, column=col_index, value=fuid.objeto.nombre if fuid.objeto else "N/A")

#     # Ajustar ancho de columnas automáticamente
#     for col in ws.columns:
#         max_length = 0
#         column = col[0].column_letter  # Obtener la letra de la columna
#         for cell in col:
#             try:
#                 if cell.value:
#                     max_length = max(max_length, len(str(cell.value)))
#             except Exception:
#                 pass
#         ws.column_dimensions[column].width = max_length + 2

#     # Preparar la respuesta HTTP para descargar el archivo Excel
#     response = HttpResponse(
#         content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
#     )
#     response["Content-Disposition"] = 'attachment; filename="fuids_export.xlsx"'
#     wb.save(response)

#     return response

# # def exportar_fuid_excel(request, fuid_id):
# #     fuid = FUID.objects.get(id=fuid_id)
# #     registros = fuid.registros.all()

# #     wb = Workbook()
# #     ws = wb.active
# #     ws.title = f"FUID {fuid.id}"

# #     ws.merge_cells('A1:G1')
# #     ws['A1'] = "FORMATO ÚNICO DE INVENTARIO DOCUMENTAL"
# #     ws['A1'].font = Font(size=14, bold=True)
# #     ws['A1'].alignment = Alignment(horizontal="center", vertical="center")

# #     ws.append([
# #         "Elaborado Por:", 
# #         fuid.creado_por.username if fuid.creado_por else "N/A", "",
# #         "Entregado Por:", "", 
# #         "Recibido Por:", ""
# #     ])
# #     ws.append([
# #         "Nombres y Apellidos:", 
# #         fuid.creado_por.get_full_name() if fuid.creado_por else "N/A", "",
# #         "Nombres y Apellidos:", "", 
# #         "Nombres y Apellidos:", ""
# #     ])
# #     ws.append([
# #         "Cargo:", "Responsable de Archivo", "", 
# #         "Cargo:", "", 
# #         "Cargo:", ""
# #     ])
# #     ws.append([
# #         "Lugar:", "Hospital del Sarare", "Fecha:", fuid.fecha_creacion.strftime("%Y-%m-%d"),
# #         "Lugar:", "Hospital del Sarare", "Fecha:", fuid.fecha_creacion.strftime("%Y-%m-%d")
# #     ])

# #     ws.append([])  # Espacio en blanco

# #     encabezados = [
# #         "Número de Orden", "Código Serie", "Código Subserie",
# #         "Unidad Documental", "Fecha Inicial", "Fecha Final",
# #         "Ubicación", "Notas"
# #     ]
# #     ws.append(encabezados)
# #     for col_index in range(1, len(encabezados) + 1):
# #         ws.cell(row=6, column=col_index).font = Font(bold=True)

# #     for registro in registros:
# #         ws.append([
# #             registro.numero_orden,
# #             registro.codigo_serie.nombre if registro.codigo_serie else "N/A",
# #             registro.codigo_subserie.nombre if registro.codigo_subserie else "N/A",
# #             registro.unidad_documental,
# #             registro.fecha_inicial.strftime("%Y-%m-%d") if registro.fecha_inicial else "N/A",
# #             registro.fecha_final.strftime("%Y-%m-%d") if registro.fecha_final else "N/A",
# #             registro.ubicacion,
# #             registro.notas or "N/A"
# #         ])

# #     # Ajuste automático de ancho de columnas, ignorando celdas combinadas
# #     for col_index, col in enumerate(ws.columns, start=1):
# #         max_length = 0
# #         for cell in col:
# #             if not isinstance(cell, MergedCell) and cell.value is not None:
# #                 cell_length = len(str(cell.value))
# #                 if cell_length > max_length:
# #                     max_length = cell_length
# #         col_letter = get_column_letter(col_index)
# #         ws.column_dimensions[col_letter].width = max_length + 2

# #     response = HttpResponse(
# #         content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
# #     )
# #     response['Content-Disposition'] = f'attachment; filename=FUID_{fuid.id}.xlsx'
# #     wb.save(response)
# #     return response


### .\documentos\__init__.py ###


### .\documentos\migrations\0001_initial.py ###
# Generated by Django 4.2.17 on 2024-12-09 14:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SerieDocumental",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("codigo", models.CharField(max_length=50)),
                ("nombre", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="SubserieDocumental",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("codigo", models.CharField(max_length=50)),
                ("nombre", models.CharField(max_length=255)),
                (
                    "serie",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="documentos.seriedocumental",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RegistroDeArchivo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("numero_orden", models.CharField(max_length=50)),
                ("unidad_documental", models.CharField(max_length=255)),
                ("fecha_archivo", models.DateField()),
                ("fecha_inicial", models.DateField(blank=True, null=True)),
                ("fecha_final", models.DateField(blank=True, null=True)),
                ("soporte_fisico", models.BooleanField(default=False)),
                ("soporte_electronico", models.BooleanField(default=False)),
                ("caja", models.CharField(blank=True, max_length=50, null=True)),
                ("carpeta", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "tomo_legajo_libro",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("numero_folios", models.IntegerField(blank=True, null=True)),
                ("tipo", models.CharField(blank=True, max_length=100, null=True)),
                ("cantidad", models.IntegerField(blank=True, null=True)),
                ("ubicacion", models.CharField(max_length=255)),
                (
                    "cantidad_documentos_electronicos",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "tamano_documentos_electronicos",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("notas", models.TextField(blank=True, null=True)),
                ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
                (
                    "codigo_serie",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="registros",
                        to="documentos.seriedocumental",
                    ),
                ),
                (
                    "codigo_subserie",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="registros",
                        to="documentos.subseriedocumental",
                    ),
                ),
                (
                    "creado_por",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PermisoUsuarioSerie",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("permiso_crear", models.BooleanField(default=False)),
                ("permiso_editar", models.BooleanField(default=False)),
                ("permiso_consultar", models.BooleanField(default=True)),
                ("permiso_eliminar", models.BooleanField(default=False)),
                (
                    "serie",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="documentos.seriedocumental",
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]


### .\documentos\migrations\0002_registrodearchivo_codigo.py ###
# Generated by Django 4.2.17 on 2024-12-13 04:44

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("documentos", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="registrodearchivo",
            name="codigo",
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
    ]


### .\documentos\migrations\0003_fuid_registrodearchivo_fuid.py ###
# Generated by Django 4.2.17 on 2024-12-13 06:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("documentos", "0002_registrodearchivo_codigo"),
    ]

    operations = [
        migrations.CreateModel(
            name="FUID",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "entidad_productora",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "unidad_administrativa",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "oficina_productora",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("objeto", models.CharField(blank=True, max_length=255, null=True)),
                ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
                (
                    "creado_por",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "registros",
                    models.ManyToManyField(
                        blank=True,
                        related_name="fuids",
                        to="documentos.registrodearchivo",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="registrodearchivo",
            name="fuid",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="archivos",
                to="documentos.fuid",
            ),
        ),
    ]


### .\documentos\migrations\0004_entidadproductora_objeto_and_more.py ###
# Generated by Django 4.2.17 on 2024-12-13 08:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("documentos", "0003_fuid_registrodearchivo_fuid"),
    ]

    operations = [
        migrations.CreateModel(
            name="EntidadProductora",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="Objeto",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.RemoveField(
            model_name="registrodearchivo",
            name="fuid",
        ),
        migrations.AlterField(
            model_name="fuid",
            name="creado_por",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="fuids",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="UnidadAdministrativa",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255)),
                (
                    "entidad_productora",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="unidades",
                        to="documentos.entidadproductora",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OficinaProductora",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255)),
                (
                    "unidad_administrativa",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="oficinas",
                        to="documentos.unidadadministrativa",
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="fuid",
            name="entidad_productora",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="documentos.entidadproductora",
            ),
        ),
        migrations.AlterField(
            model_name="fuid",
            name="objeto",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="documentos.objeto",
            ),
        ),
        migrations.AlterField(
            model_name="fuid",
            name="oficina_productora",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="documentos.oficinaproductora",
            ),
        ),
        migrations.AlterField(
            model_name="fuid",
            name="unidad_administrativa",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="documentos.unidadadministrativa",
            ),
        ),
    ]


### .\documentos\migrations\0005_fuid_elaborado_por_cargo_fuid_elaborado_por_fecha_and_more.py ###
# Generated by Django 4.2.17 on 2024-12-14 18:18

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("documentos", "0004_entidadproductora_objeto_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="fuid",
            name="elaborado_por_cargo",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="fuid",
            name="elaborado_por_fecha",
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="fuid",
            name="elaborado_por_lugar",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="fuid",
            name="elaborado_por_nombre",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="fuid",
            name="entregado_por_cargo",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="fuid",
            name="entregado_por_fecha",
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="fuid",
            name="entregado_por_lugar",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="fuid",
            name="entregado_por_nombre",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="fuid",
            name="recibido_por_cargo",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="fuid",
            name="recibido_por_fecha",
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="fuid",
            name="recibido_por_lugar",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="fuid",
            name="recibido_por_nombre",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
    ]


### .\documentos\migrations\0006_fichapaciente.py ###
# Generated by Django 4.2.17 on 2024-12-18 17:07

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        (
            "documentos",
            "0005_fuid_elaborado_por_cargo_fuid_elaborado_por_fecha_and_more",
        ),
    ]

    operations = [
        migrations.CreateModel(
            name="FichaPaciente",
            fields=[
                ("consecutivo", models.AutoField(primary_key=True, serialize=False)),
                ("primer_nombre", models.CharField(max_length=50)),
                (
                    "segundo_nombre",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("primer_apellido", models.CharField(max_length=50)),
                (
                    "segundo_apellido",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("num_identificacion", models.CharField(max_length=20, unique=True)),
                ("fecha_nacimiento", models.DateField()),
                ("primer_nombre_padre", models.CharField(max_length=50)),
                (
                    "segundo_nombre_padre",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("primer_apellido_padre", models.CharField(max_length=50)),
                (
                    "segundo_apellido_padre",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "Numero_historia_clinica",
                    models.CharField(max_length=20, unique=True),
                ),
                ("caja", models.CharField(max_length=20)),
                ("carpeta", models.CharField(max_length=20)),
            ],
        ),
    ]


### .\documentos\migrations\0007_alter_fichapaciente_primer_apellido_padre_and_more.py ###
# Generated by Django 4.2.17 on 2024-12-18 17:59

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("documentos", "0006_fichapaciente"),
    ]

    operations = [
        migrations.AlterField(
            model_name="fichapaciente",
            name="primer_apellido_padre",
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name="fichapaciente",
            name="primer_nombre_padre",
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
    ]


### .\documentos\migrations\0008_fichapaciente_activo_fichapaciente_sexo_and_more.py ###
# Generated by Django 4.2.17 on 2024-12-19 01:38

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("documentos", "0007_alter_fichapaciente_primer_apellido_padre_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="fichapaciente",
            name="activo",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="fichapaciente",
            name="sexo",
            field=models.CharField(default="Masculino", max_length=10),
        ),
        migrations.AddField(
            model_name="fichapaciente",
            name="tipo_identificacion",
            field=models.CharField(default="Cedula de Ciudadania", max_length=20),
        ),
    ]


### .\documentos\migrations\0009_alter_registrodearchivo_fecha_archivo.py ###
# Generated by Django 4.2.17 on 2024-12-24 12:39

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("documentos", "0008_fichapaciente_activo_fichapaciente_sexo_and_more"),
    ]

    operations = [
        migrations.AlterField(
            model_name="registrodearchivo",
            name="fecha_archivo",
            field=models.DateField(blank=True, null=True),
        ),
    ]


### .\documentos\migrations\__init__.py ###


### .\documentos\migrations\__pycache__\0001_initial.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\migrations\__pycache__\0002_registrodearchivo_codigo.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\migrations\__pycache__\0003_fuid_registrodearchivo_fuid.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\migrations\__pycache__\0004_entidadproductora_objeto_and_more.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\migrations\__pycache__\0005_fuid_elaborado_por_cargo_fuid_elaborado_por_fecha_and_more.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\migrations\__pycache__\0006_fichapaciente.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\migrations\__pycache__\0007_alter_fichapaciente_primer_apellido_padre_and_more.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\migrations\__pycache__\0008_fichapaciente_activo_fichapaciente_sexo_and_more.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\migrations\__pycache__\0009_alter_registrodearchivo_fecha_archivo.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\migrations\__pycache__\__init__.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\static\css\styles.css ###
/* Fuente global */
body {
    font-family: 'Roboto', Arial, sans-serif;
    background: linear-gradient(135deg, #f4f6f8, #e9edf1); /* Fondo limpio y profesional */
    color: #333; /* Texto en gris oscuro para legibilidad */
    margin: 0;
    padding: 0;
    line-height: 1.6;
}

/* Barra de navegación */
.navbar {
    background-color: #f8f9fa; /* Cremita */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Sombra sutil */
}
.navbar-brand, .navbar-nav .nav-link, .navbar-text a {
    color: #003366 !important; /* Azul oscuro */
    font-weight: bold;
    transition: color 0.2s ease;
}
.navbar-nav .nav-link:hover {
    color: #0056b3 !important; /* Azul más vibrante */
}
.nav-animado, #mainContainer {
    opacity: 0; /* Para animaciones con Anime.js */
}

/* Hero Section */
.hero {
    background: #ffffff;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    padding: 2rem;
    margin-bottom: 2rem;
}
.hero h1 {
    font-size: 2rem;
    font-weight: 700;
    color: #003366;
}
.hero p {
    font-size: 1rem;
    color: #555;
}

/* Tarjetas estadísticas */
.stats-card {
    border: none;
    background: #ffffff;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    padding: 1rem;
    text-align: center;
    opacity: 0; /* Para animación con Anime.js */
}
.stats-card i {
    font-size: 2rem;
    color: #0056b3; /* Azul vibrante */
    margin-bottom: 0.5rem;
}
.stats-card h5 {
    font-weight: 600;
    color: #003366;
}
.stats-card p {
    margin: 0;
    font-size: 0.85rem;
    color: #555;
}

/* Títulos de secciones */
.section-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: #003366;
    margin-bottom: 1rem;
}

/* Quick Links */
.quick-links .card {
    border: none;
    border-radius: 10px;
    background: #ffffff;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    text-align: center;
    padding: 1rem;
    transition: transform 0.1s ease;
    opacity: 0; /* Para animación con Anime.js */
}
.quick-links .card:hover {
    transform: scale(1.02);
}
.quick-links i {
    font-size: 2rem;
    color: #0056b3; /* Azul vibrante */
    margin-bottom: 0.5rem;
}
.quick-links h5 {
    font-size: 1rem;
    font-weight: 600;
    color: #003366;
    margin-bottom: 0.5rem;
}

/* Footer */
footer {
    margin-top: 3rem;
    padding: 1rem;
    background: #003366;
    color: #ffffff;
    text-align: center;
    border-radius: 10px 10px 0 0;
}
footer p {
    margin: 0;
    font-size: 0.9rem;
}

/* Botón de inicio de sesión */
.login-btn {
    background: #0069d9;
    color: #ffffff;
    transition: transform 0.1s ease, box-shadow 0.1s ease;
}
.login-btn:hover {
    background: #005bb5;
    transform: scale(1.05);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Tablas */
.table {
    border-collapse: collapse;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    width: 80%;
    table-layout: auto;
}
.table th, .table td {
    font-size: 0.9rem;
    padding: 12px;
    border: 1px solid #ddd;
    text-align: left;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}
.table-striped tbody tr:nth-of-type(odd) {
    background-color: #f8f9fa;
}
.table-striped tbody tr:hover {
    background-color: #e9ecef;
}

/* Inputs en filtros */
thead input {
    width: 100%;
    box-sizing: border-box;
    font-size: 0.75rem;
    padding: 2px;
    border: 1px solid #ccc;
    border-radius: 3px;
}

/* Ajustes DataTables */
.dataTables_wrapper .dataTables_filter {
    float: left !important;
    text-align: left;
}
.dataTables_wrapper .dataTables_paginate {
    float: left !important;
}

/* Botones */
.btn-primary {
    background-color: #0069d9 !important;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    font-size: 1rem;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}
.btn-primary:hover {
    background-color: #005bb5 !important;
    transform: scale(1.05);
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}
.btn-warning {
    background-color: #ffc107 !important;
    color: #212529;
    border: none;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}
.btn-warning:hover {
    background-color: #e0a800 !important;
    transform: scale(1.05);
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}
.btn-info {
    background-color: #17a2b8 !important;
    border: none;
    color: #fff;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}
.btn-info:hover {
    background-color: #138496 !important;
    transform: scale(1.05);
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

/* Media Queries */
@media (max-width: 576px) {
    .hero h1 {
        font-size: 1.5rem;
    }
}


### .\documentos\static\css\stylesgraph.css ###
/* General */
body {
    background-color: #f9fafb;
    font-family: 'Roboto', sans-serif;
    color: #333;
    margin: 0;
    padding: 0;
}

/* Barra de Navegación */
.navbar {
    background-color: #007bff;
    color: white;
    padding: 10px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.navbar-brand {
    font-size: 1.5rem;
    font-weight: bold;
    color: white;
    text-decoration: none;
}

.navbar-text {
    font-size: 1rem;
    color: white;
}

/* Contenedor Principal */
.container {
    max-width: 1200px;
    margin: 30px auto;
    padding: 20px;
}

/* Filtros */
.filters {
    text-align: center;
    margin-bottom: 20px;
}

.filters label {
    font-weight: bold;
    margin-right: 10px;
}

.filters select, .filters button {
    padding: 10px;
    font-size: 1rem;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.filters button {
    background-color: #007bff;
    color: white;
    border: none;
    cursor: pointer;
}

.filters button:hover {
    background-color: #0056b3;
}

/* Grilla de estadísticas */
.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
}

/* Tarjetas */
.stat-card {
    background-color: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    text-align: center;
    transition: transform 0.2s, box-shadow 0.2s;
}

.stat-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

.stat-card h2 {
    font-size: 1.2rem;
    margin-bottom: 15px;
    color: #007bff;
}

/* Gráficos */
canvas {
    max-width: 100%;
    height: auto;
}

/* Footer */
footer {
    text-align: center;
    padding: 20px;
    background-color: #f1f1f1;
    color: #666;
    font-size: 0.9rem;
}

footer a {
    color: #007bff;
    text-decoration: none;
}

footer a:hover {
    text-decoration: underline;
}


### .\documentos\static\img\fuid_logo.png ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]


### .\documentos\templates\base.html ###
{% load static %}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Central de Archivos del Sarare{% endblock %}</title>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <!-- Animate.css -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">


    <!-- <style>
        body {
            background: linear-gradient(135deg, #fffff5, #ffffff);
            font-family: Arial, sans-serif;
        }
        .navbar {
            background-color: #003366 !important;
        }
        .navbar-brand, .navbar-nav .nav-link, .navbar-text a {
            color: #ffffff !important;
            transition: color 0.2s ease;
        }
        .navbar-nav .nav-link:hover {
            color: #f0f0f0 !important;
        }
        footer {
            margin-top: 3rem;
            padding: 1.5rem;
            background: #003366;
            color: #ffffff;
            text-align: center;
            border-radius: 10px 10px 0 0;
            font-size: 0.9rem;
        }

        /* Transiciones y hover suaves */
        .navbar-brand, .nav-link {
            transition: transform 0.2s ease, color 0.2s ease;
        }
        .nav-link:hover {
            transform: translateY(-2px);
        }
    </style> -->
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-light bg-light mb-4 animate__animated animate__fadeInDown animate__delay-1s">
        <div class="container-fluid">
            <a class="navbar-brand d-flex align-items-center" href="/">
                <i class="bi bi-archive-fill text-primary me-2" style="font-size:1.5rem;"></i>
                Gestión de Archivos
            </a>
            <span class="navbar-text">
                {% if request.user.is_authenticated %}
                    Bienvenido, {{ request.user.username }} | <a href="{% url 'logout' %}">Cerrar sesión</a>
                {% else %}
                    <a href="{% url 'login' %}">Iniciar sesión</a>
                {% endif %}
            </span>
        </div>
    </nav>

    <!-- Contenido principal -->
    <div class="container animate__animated animate__fadeInUp" id="mainContent">
        {% block content %}
        {% endblock %}
    </div>

    <footer class="animate__animated animate__fadeInUp" id="mainFooter">
        <p>© {{ current_year }} Hospital del Sarare - Central de Archivos del Sarare. Todos los derechos reservados.</p>
    </footer>

    <!-- Bootstrap JS Bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Anime.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Animación suave para el navbar y el footer
            anime({
                targets: '#mainNavbar',
                opacity: [0,1],
                translateY: [-20,0],
                duration: 800,
                easing: 'easeOutExpo'
            });

            anime({
                targets: '#mainFooter',
                opacity: [0,1],
                translateY: [20,0],
                duration: 1000,
                easing: 'easeOutExpo',
                delay: 500
            });
        });
    </script>
</body>
</html>


### .\documentos\templates\detalle_ficha_paciente.html ###
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Detalle de Ficha del Paciente</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <style>
        /* Manteniendo el estilo de la barra de navegación */
        .navbar {
            background-color: #f8f9fa;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .navbar-brand, .navbar-nav .nav-link, .navbar-text a {
            color: #003366 !important;
            font-weight: bold;
            transition: color 0.2s ease;
        }
        .navbar-nav .nav-link:hover {
            color: #0056b3 !important;
        }

        /* Centrando el contenido principal */
        body {
            background: linear-gradient(135deg, #f4f6f8, #e9edf1);
            font-family: 'Roboto', Arial, sans-serif;
            margin: 0;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }
        .main-content {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .card {
            max-width: 800px;
            width: 100%;
            animation: fadeIn 0.5s ease-out;
        }

        .card-header {
            background-color: #0069d9;
            color: #fff;
            text-align: center;
        }

        .card-footer {
            background: transparent;
            border-top: none;
        }

        table {
            width: 100%;
        }

        table th, table td {
            padding: 12px 16px;
            vertical-align: middle;
        }

        table th {
            width: 30%; /* Reservando más espacio para nombres */
            text-align: left;
            font-weight: bold;
        }

        table td {
            word-wrap: break-word;
            word-break: break-word;
        }

        table tr {
            border-bottom: 1px solid #ddd;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>
<body>
    <!-- Barra de navegación -->
    <nav class="navbar navbar-light bg-light">
        <div class="container-fluid">
            <a class="navbar-brand d-flex align-items-center" href="/">
                <i class="bi bi-archive-fill me-2" style="font-size:1.5rem;"></i> Gestión de Archivos
            </a>
            <span class="navbar-text">
                {% if request.user.is_authenticated %}
                    Bienvenido, {{ request.user.username }} | <a href="{% url 'logout' %}">Cerrar sesión</a>
                {% else %}
                    <a href="{% url 'login' %}">Iniciar sesión</a>
                {% endif %}
            </span>
        </div>
    </nav>

    <!-- Contenido principal -->
    <div class="main-content">
        <div class="card shadow-lg">
            <div class="card-header">
                <h5>Ficha ID: {{ ficha.consecutivo }}</h5>
            </div>
            <div class="card-body">
                <table class="table table-borderless">
                    <tr>
                        <th>Nombre Completo:</th>
                        <td>{{ ficha.primer_nombre }} {{ ficha.segundo_nombre }} {{ ficha.primer_apellido }} {{ ficha.segundo_apellido }}</td>
                    </tr>
                    <tr>
                        <th>Tipo de Documento:</th>
                        <td>{{ ficha.tipo_identificacion }}</td>
                    </tr>
                    <tr>
                        <th>Número de Identificación:</th>
                        <td>{{ ficha.num_identificacion }}</td>
                    </tr>
                    <tr>
                        <th>Sexo:</th>
                        <td>{{ ficha.sexo }}</td>
                    </tr>
                    <tr>
                        <th>Estado:</th>
                        <td>
                            {% if ficha.activo %}
                            <span class="badge bg-success">Activo</span>
                            {% else %}
                            <span class="badge bg-secondary">Pasivo</span>
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <th>Fecha de Nacimiento:</th>
                        <td>{{ ficha.fecha_nacimiento|date:"Y-m-d" }}</td>
                    </tr>
                    <tr>
                        <th>Nombre Completo del Padre:</th>
                        <td>{{ ficha.primer_nombre_padre }} {{ ficha.segundo_nombre_padre }} {{ ficha.primer_apellido_padre }} {{ ficha.segundo_apellido_padre }}</td>
                    </tr>
                    <tr>
                        <th>Número de Historia Clínica:</th>
                        <td>{{ ficha.Numero_historia_clinica }}</td>
                    </tr>
                    <tr>
                        <th>Caja:</th>
                        <td>{{ ficha.caja }}</td>
                    </tr>
                    <tr>
                        <th>Carpeta:</th>
                        <td>{{ ficha.carpeta }}</td>
                    </tr>
                </table>
            </div>
            <div class="card-footer d-flex justify-content-between">
                <a href="{% url 'lista_fichas' %}" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Volver a la Lista
                </a>
                <a href="{% url 'editar_ficha' ficha.consecutivo %}" class="btn btn-primary">
                    <i class="bi bi-pencil-square"></i> Editar Ficha
                </a>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            anime({
                targets: '.card',
                opacity: [0, 1],
                translateY: [-30, 0],
                duration: 1000,
                easing: 'easeOutExpo',
            });
        });
    </script>
</body>
</html>


### .\documentos\templates\ficha_paciente_form.html ###
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registrar Ficha del Paciente</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
        <!-- Animate.css -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
        <!-- Bootstrap Icons -->
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

    <!-- <style>
        body {
            background: linear-gradient(135deg, #f0f2f5 0%, #ffffff 100%);
        }
        .navbar {
            background-color: #007bff;
        }
        .navbar-brand {
            color: #fff !important;
            font-weight: bold;
        }
        .card {
            border-radius: 10px;
            border: none;
        }
        .card-body {
            padding: 2rem;
        }
        .form-section-title {
            font-size: 1.25rem;
            font-weight: bold;
            margin-top: 1.5rem;
            margin-bottom: 1rem;
            color: #555;
            border-bottom: 2px solid #e0e0e0;
            padding-bottom: 0.5rem;
        }
        label {
            font-weight: 500;
            margin-bottom: 0.3rem;
        }
        .form-control {
            border-radius: 5px;
            transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        .form-control:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 .2rem rgba(0,123,255,.25);
        }
        .btn-primary {
            background-color: #007bff;
            border: none;
            border-radius: 5px;
            font-weight: 600;
            transition: background-color 0.2s ease-in-out;
        }
        .btn-primary:hover {
            background-color: #0056b3;
        }
        .alert {
            margin-bottom: 2rem;
        }
    </style> -->
</head>
<body>
    <!-- Barra de navegación superior -->
    <nav class="navbar navbar-light bg-light mb-4 animate__animated animate__fadeInDown animate__delay-1s">
        <div class="container-fluid">
            <a class="navbar-brand d-flex align-items-center" href="/">
                <i class="bi bi-archive-fill text-primary me-2" style="font-size:1.5rem;"></i>
                Gestión de Archivos
            </a>
            <span class="navbar-text">
                {% if request.user.is_authenticated %}
                    Bienvenido, {{ request.user.username }} | <a href="{% url 'logout' %}">Cerrar sesión</a>
                {% else %}
                    <a href="{% url 'login' %}">Iniciar sesión</a>
                {% endif %}
            </span>
        </div>
    </nav>

    <div class="container mt-5 mb-5">
        <h1 class="text-center mb-4">Registrar Ficha del Paciente</h1>
        
        <!-- Mensajes de éxito -->
        {% if messages %}
        <div>
            {% for message in messages %}
                {% if message.tags == 'success' %}
                    <div class="alert alert-success" role="alert">
                        {{ message }}
                    </div>
                {% elif message.tags == 'error' %}
                    <div class="alert alert-danger" role="alert">
                        {{ message }}
                    </div>
                {% else %}
                    <div class="alert alert-info" role="alert">
                        {{ message }}
                    </div>
                {% endif %}
            {% endfor %}
        </div>
        {% endif %}
        
        
        <div class="card shadow-sm">
            <div class="card-body">
                <form method="post" id="fichaPacienteForm">
                    {% csrf_token %}
                    
                    <!-- Sección: Datos del Paciente -->
                    <div class="form-section-title">Datos del Paciente</div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="id_primer_apellido">Primer Apellido</label>
                            {{ form.primer_apellido }}
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="id_segundo_apellido">Segundo Apellido</label>
                            {{ form.segundo_apellido }}
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="id_primer_nombre">Primer Nombre</label>
                            {{ form.primer_nombre }}
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="id_segundo_nombre">Segundo Nombre</label>
                            {{ form.segundo_nombre }}
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="id_num_identificacion">Número de Identificación</label>
                            {{ form.num_identificacion }}
                            <div class="col-md-6 mb-3">
                                <label for="id_tipo_identificacion">Tipo de Documento</label>
                                <select name="tipo_identificacion" id="id_tipo_identificacion" class="form-select">
                                    <option value="Cédula de Ciudadanía">Cédula de Ciudadanía</option>
                                    <option value="Tarjeta de Identidad">Tarjeta de Identidad</option>
                                    <option value="Pasaporte">Pasaporte</option>
                                    <option value="Registro Civil">Registro Civil</option>
                                </select>
                            </div>

                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="id_fecha_nacimiento">Fecha de Nacimiento</label>
                            {{ form.fecha_nacimiento }}
                        </div>
                    </div>

                    <!-- Sección: Datos del Padre -->
                    <div class="form-section-title">Datos del Padre</div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="id_primer_nombre_padre">Primer Nombre del Padre</label>
                            {{ form.primer_nombre_padre }}
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="id_segundo_nombre_padre">Segundo Nombre del Padre</label>
                            {{ form.segundo_nombre_padre }}
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="id_primer_apellido_padre">Primer Apellido del Padre</label>
                            {{ form.primer_apellido_padre }}
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="id_segundo_apellido_padre">Segundo Apellido del Padre</label>
                            {{ form.segundo_apellido_padre }}
                        </div>
                    </div>

                    <!-- Sección: Datos Administrativos -->
                    <div class="form-section-title">Datos Administrativos</div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="id_Numero_historia_clinica">Número de Historia Clínica</label>
                            {{ form.Numero_historia_clinica }}
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="id_caja">Número de Caja</label>
                            {{ form.caja }}
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="id_carpeta">Número de Carpeta</label>
                            {{ form.carpeta }}
                        </div>
                    </div>

                    <!-- Campos adicionales para 'sexo' y 'activo' -->
<div class="form-section-title">Datos Adicionales</div>
<div class="row">
    <!-- Campo 'sexo' con opciones Masculino/Femenino -->
    <div class="col-md-6 mb-3">
        <label for="id_sexo">Sexo</label>
        <select name="sexo" id="id_sexo" class="form-select">
            <option value="Masculino">Masculino</option>
            <option value="Femenino">Femenino</option>
        </select>
    </div>

    <!-- Campo 'activo' con opción de 1 para activo y 0 para pasivo -->
    <div class="col-md-6 mb-3">
        <label for="id_activo">Estado</label>
        <div class="form-check">
            <input class="form-check-input" type="radio" name="activo" id="id_activo_1" value="1" checked>
            <label class="form-check-label" for="id_activo_1">Activo</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" name="activo" id="id_activo_0" value="0">
            <label class="form-check-label" for="id_activo_0">Pasivo</label>
        </div>
    </div>
</div>


                    <button type="submit" class="btn btn-primary w-100 mt-4">Guardar Ficha</button>
                </form>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script> -->
<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Animar el contenedor principal con Anime.js
        anime({
            targets: '#mainContainer',
            opacity: [0,1],
            duration: 800,
            easing: 'easeOutExpo'
        });

        // Animar las filas de la tabla
        anime({
            targets: '#fuidTable tbody tr',
            opacity: [0,1],
            translateY: [20,0],
            duration: 500,
            delay: anime.stagger(100),
            easing: 'easeOutExpo'
        });

        // Animar el navbar
        anime({
            targets: 'nav.navbar',
            opacity: [0,1],
            duration: 500,
            easing: 'easeOutExpo'
        });
    });
</script>
    <script>
        // Validar campos vacíos y asignarles "(N/A)" antes de enviar el formulario
        document.getElementById('fichaPacienteForm').addEventListener('submit', function(event) {
            const fields = ['id_primer_nombre_padre', 'id_segundo_nombre_padre', 'id_primer_apellido_padre', 'id_segundo_apellido_padre'];
            fields.forEach(function(fieldId) {
                const field = document.getElementById(fieldId);
                if (field && field.value.trim() === '') {
                    field.value = '(N/A)';
                }
            });
        });
    </script>
</body>
</html>


### .\documentos\templates\fuid_complete_list.html ###
{% load custom_filters %}
{% load static %}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Detalle del FUID</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css" rel="stylesheet">
    <link href="https://cdn.datatables.net/buttons/2.4.2/css/buttons.bootstrap5.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">

    <!-- Animate.css -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    <!-- Anime.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js"></script>

    <style>
        body {
            background: linear-gradient(135deg, #f4f6f8, #e9edf1); /* Fondo limpio y profesional */
            font-family: 'Roboto', Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        .navbar {
            background-color: #f8f9fa; /* Cremita */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Sombra sutil */
        }
        .navbar-brand, .navbar-text a {
            color: #003366 !important; /* Azul oscuro */
            transition: color 0.2s ease;
        }
        .navbar-text a:hover {
            color: #0056b3 !important; /* Azul más vibrante */
        }
        .page-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: #003366; /* Azul oscuro */
            margin-bottom: 1.5rem;
            text-align: center;
        }
        .section-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-top: 1rem;
            color: #333; /* Gris oscuro */
            border-bottom: 2px solid #003366; /* Azul oscuro */
            display: inline-block;
            padding-bottom: 0.25rem;
        }
        .info-card {
            border: none;
            background: #ffffff; /* Blanco */
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            margin-bottom: 2rem;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            opacity: 0; /* Para animación con Anime.js */
        }
        .info-card:hover {
            transform: scale(1.02);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.07);
        }
        .info-card-header {
            background: #003366; /* Azul oscuro */
            color: #ffffff; /* Blanco */
            border-radius: 10px 10px 0 0;
            padding: 1rem;
            font-size: 1.25rem;
            font-weight: 600;
        }
        .info-row {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
        }
        .info-item {
            background: #f8f9fa; /* Cremita */
            border-radius: 8px;
            padding: 0.75rem 1rem;
            flex: 1 1 300px;
            min-width: 250px;
        }
        .info-item strong {
            display: block;
            color: #003366; /* Azul oscuro */
            font-weight: 600;
            margin-bottom: 0.2rem;
        }
        .person-block {
            background: #ffffff; /* Blanco */
            border: 1px solid #dcdcdc;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            opacity: 0; /* Para animación */
        }
        .person-block:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
        }
        .person-title {
            font-size: 1rem;
            font-weight: 700;
            color: #003366; /* Azul oscuro */
            border-bottom: 1px solid #dcdcdc;
            margin-bottom: 0.75rem;
            padding-bottom: 0.5rem;
        }
        .person-info p {
            margin: 0.25rem 0;
        }
        .person-info strong {
            color: #333; /* Gris oscuro */
        }
        .table th {
            background-color: #003366 !important; /* Azul oscuro */
            color: #ffffff !important; /* Blanco */
            font-weight: 600 !important;
            text-align: center;
            vertical-align: middle;
        }
        .dt-inputs input {
            width: 100%;
            padding: 2px;
            font-size: 0.8rem;
            border: 1px solid #ccc;
            border-radius: 3px;
        }
        .btn-excel {
            background-color: #28a745; /* Verde */
            color: #ffffff; /* Blanco */
            transition: transform 0.2s ease;
        }
        .btn-excel:hover {
            background-color: #218838; /* Verde oscuro */
            transform: scale(1.05);
        }
        .btn-pdf {
            background-color: #dc3545; /* Rojo */
            color: #ffffff; /* Blanco */
            transition: transform 0.2s ease;
        }
        .btn-pdf:hover {
            background-color: #c82333; /* Rojo oscuro */
            transform: scale(1.05);
        }
        .no-records {
            text-align: center;
            font-style: italic;
            color: #555; /* Gris mediano */
        }
    
        /* Contenedor principal para animaciones */
        #mainContainer {
            opacity: 0;
        }
    </style>
    
</head>
<body>
    <nav class="navbar navbar-light bg-light mb-4 animate__animated animate__fadeInDown">
        <div class="container-fluid">
            <a class="navbar-brand d-flex align-items-center" href="/">
                <i class="bi bi-archive-fill me-2" style="font-size:1.5rem;"></i> Gestión de Pacientes
            </a>
            <span class="navbar-text">
                {% if request.user.is_authenticated %}
                    Bienvenido, {{ request.user.username }} | <a href="{% url 'logout' %}">Cerrar sesión</a>
                {% else %}
                    <a href="{% url 'login' %}">Iniciar sesión</a>
                {% endif %}
            </span>
        </div>
    </nav>

        
    </nav>

    <div class="container-fluid animate__animated animate__fadeInUp" id="mainContainer">
        <h1 class="page-title animate__animated animate__fadeInDown"><i class="bi bi-file-earmark-text-fill"></i> Detalle del FUID #{{ fuid.id }}</h1>

        <!-- Información del FUID -->
        <div class="info-card animate__animated animate__fadeInUp">
            <div class="info-card-header">
                Información General del FUID
            </div>

            <div class="text-end mb-3">
                <a href="{% url 'export_fuid_to_excel' fuid.id %}" class="btn btn-success">
                    <i class="bi bi-file-earmark-spreadsheet-fill"></i> Exportar a Excel
                </a>
            </div>
            
            
            <div class="card-body">
                <div class="info-row">
                    <div class="info-item">
                        <strong>Entidad Productora</strong>
                        <span>{{ fuid.entidad_productora }}</span>
                    </div>
                    <div class="info-item">
                        <strong>Unidad Administrativa</strong>
                        <span>{{ fuid.unidad_administrativa }}</span>
                    </div>
                    <div class="info-item">
                        <strong>Oficina Productora</strong>
                        <span>{{ fuid.oficina_productora }}</span>
                    </div>
                    <div class="info-item">
                        <strong>Objeto</strong>
                        <span>{{ fuid.objeto }}</span>
                    </div>
                    <div class="info-item">
                        <strong>Fecha de Creación</strong>
                        <span>{{ fuid.fecha_creacion|date:"Y-m-d H:i" }}</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Personas involucradas -->
        <div class="info-card animate__animated animate__fadeInUp animate__delay-1s">
            <div class="info-card-header">
                Responsables
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-4">
                        <div class="person-block">
                            <div class="person-title"><i class="bi bi-pencil-square"></i> Elaborado Por</div>
                            <div class="person-info">
                                <p><strong>Nombre:</strong> {{ fuid.elaborado_por_nombre }}</p>
                                <p><strong>Cargo:</strong> {{ fuid.elaborado_por_cargo }}</p>
                                <p><strong>Lugar:</strong> {{ fuid.elaborado_por_lugar }}</p>
                                <p><strong>Fecha:</strong> {{ fuid.elaborado_por_fecha }}</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="person-block">
                            <div class="person-title"><i class="bi bi-arrow-right-square"></i> Entregado Por</div>
                            <div class="person-info">
                                <p><strong>Nombre:</strong> {{ fuid.entregado_por_nombre }}</p>
                                <p><strong>Cargo:</strong> {{ fuid.entregado_por_cargo }}</p>
                                <p><strong>Lugar:</strong> {{ fuid.entregado_por_lugar }}</p>
                                <p><strong>Fecha:</strong> {{ fuid.entregado_por_fecha }}</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="person-block">
                            <div class="person-title"><i class="bi bi-check2-square"></i> Recibido Por</div>
                            <div class="person-info">
                                <p><strong>Nombre:</strong> {{ fuid.recibido_por_nombre }}</p>
                                <p><strong>Cargo:</strong> {{ fuid.recibido_por_cargo }}</p>
                                <p><strong>Lugar:</strong> {{ fuid.recibido_por_lugar }}</p>
                                <p><strong>Fecha:</strong> {{ fuid.recibido_por_fecha }}</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Registros asociados -->
        <div class="info-card animate__animated animate__fadeInUp animate__delay-2s">
            <div class="info-card-header">
                Registros Asociados al FUID
            </div>
            <div class="card-body">
                <div class="table-responsive" style="overflow-x:auto;">
                    <table id="tablaFUID" class="table table-striped table-bordered w-100">
                        <thead>
                            <tr>
                                <th>N° Orden</th>
                                <th>Código</th>
                                <th>Cód. Serie</th>
                                <th>Cód. Subserie</th>
                                <th>Unidad Documental</th>
                                <th>F. Archivo</th>
                                <th>F. Inicial</th>
                                <th>F. Final</th>
                                <th>Sop. Físico</th>
                                <th>Sop. Electrónico</th>
                                <th>Caja</th>
                                <th>Carpeta</th>
                                <th>Tomo</th>
                                <th>N° Folios</th>
                                <th>Tipo</th>
                                <th>Cant.</th>
                                <th>Ubicación</th>
                                <th>Cant. Electrónicos</th>
                                <th>Tamaño Electrónico</th>
                                <th>Notas</th>
                                <th>Creado Por</th>
                                <th>F. Creación</th>
                            </tr>
                            <tr class="dt-inputs">
                                <th><input type="text" placeholder="N° Orden" /></th>
                                <th><input type="text" placeholder="Código" /></th>
                                <th><input type="text" placeholder="Cód. Serie" /></th>
                                <th><input type="text" placeholder="Cód. Subserie" /></th>
                                <th><input type="text" placeholder="Unidad Documental" /></th>
                                <th><input type="text" placeholder="F. Archivo" /></th>
                                <th><input type="text" placeholder="F. Inicial" /></th>
                                <th><input type="text" placeholder="F. Final" /></th>
                                <th><input type="text" placeholder="Sop. Físico" /></th>
                                <th><input type="text" placeholder="Sop. Electrónico" /></th>
                                <th><input type="text" placeholder="Caja" /></th>
                                <th><input type="text" placeholder="Carpeta" /></th>
                                <th><input type="text" placeholder="Tomo/Legajo/Libro" /></th>
                                <th><input type="text" placeholder="N° Folios" /></th>
                                <th><input type="text" placeholder="Tipo" /></th>
                                <th><input type="text" placeholder="Cant." /></th>
                                <th><input type="text" placeholder="Ubicación" /></th>
                                <th><input type="text" placeholder="Cant. Elec." /></th>
                                <th><input type="text" placeholder="Tamaño Elec." /></th>
                                <th><input type="text" placeholder="Notas" /></th>
                                <th><input type="text" placeholder="Creado Por" /></th>
                                <th><input type="text" placeholder="F. Creación" /></th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for registro in registros %}
                            <tr>
                                <td>{{ registro.numero_orden }}</td>
                                <td>{{ registro.codigo }}</td>
                                <td>{{ registro.codigo_serie }}</td>
                                <td>{{ registro.codigo_subserie }}</td>
                                <td>{{ registro.unidad_documental }}</td>
                                <td>{{ registro.fecha_archivo }}</td>
                                <td>{{ registro.fecha_inicial }}</td>
                                <td>{{ registro.fecha_final }}</td>
                                <td>{% if registro.soporte_fisico %}✔{% else %}✖{% endif %}</td>
                                <td>{% if registro.soporte_electronico %}✔{% else %}✖{% endif %}</td>
                                <td>{{ registro.caja }}</td>
                                <td>{{ registro.carpeta }}</td>
                                <td>{{ registro.tomo_legajo_libro }}</td>
                                <td>{{ registro.numero_folios }}</td>
                                <td>{{ registro.tipo }}</td>
                                <td>{{ registro.cantidad }}</td>
                                <td>{{ registro.ubicacion }}</td>
                                <td>{{ registro.cantidad_documentos_electronicos }}</td>
                                <td>{{ registro.tamano_documentos_electronicos }}</td>
                                <td>{{ registro.notas }}</td>
                                <td>{{ registro.creado_por }}</td>
                                <td>{{ registro.fecha_creacion }}</td>
                            </tr>
                            {% empty %}
                            <tr>
                                <td colspan="22" class="no-records">No hay registros asociados a este FUID.</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

    </div>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.2/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.bootstrap5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.html5.min.js"></script>
    
    

    <script>
        $(document).ready(function() {
            var table = $('#tablaFUID').DataTable({
                language: {
                    url: "//cdn.datatables.net/plug-ins/1.13.6/i18n/es-ES.json"
                },
                paging: true,
                searching: true,
                ordering: true,
                info: true,
                responsive: false,
                dom: '<"top"f>rt<"bottom"lp><"clear">', // Eliminado el componente "B" (botones)
            });
    
            $('#tablaFUID thead tr.dt-inputs th input').on('keyup change', function() {
                var columnIndex = $(this).closest('th').index();
                table.column(columnIndex).search(this.value).draw();
            });
        });
    
        document.addEventListener('DOMContentLoaded', () => {
            // Animar el navbar
            anime({
                targets: 'nav.navbar',
                opacity: [0,1],
                translateY: [-20,0],
                duration: 800,
                easing: 'easeOutExpo'
            });
    
            // Animar el contenedor principal
            anime({
                targets: '#mainContainer',
                opacity: [0,1],
                duration: 800,
                easing: 'easeOutExpo',
                delay: 300
            });
    
            // Animar las info-cards y person-block
            anime({
                targets: '.info-card, .person-block',
                opacity: [0,1],
                translateY: [20,0],
                duration: 800,
                delay: anime.stagger(150),
                easing: 'easeOutExpo'
            });
    
            // Animar las filas de la tabla
            anime({
                targets: '#tablaFUID tbody tr',
                opacity: [0,1],
                translateY: [10,0],
                duration: 500,
                delay: anime.stagger(50),
                easing: 'easeOutExpo',
                delay: 1000
            });
        });
    </script>
    
</body>
</html>


### .\documentos\templates\fuid_form.html ###
{% load custom_filters %}
{% load static %}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formulario de FUID</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js"></script>
    <!-- <style>
        body {
            background: linear-gradient(135deg, #ffffff, #ffffff);
        }
        .navbar {
            background-color: #003366 !important;
        }
        .navbar-brand, .navbar-nav .nav-link, .navbar-text a {
            color: #ffffff !important;
            transition: color 0.2s ease;
        }
        .navbar-nav .nav-link:hover {
            color: #f0f0f0 !important;
        }
        .hero {
            background: #ffffff;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 2rem;
            margin-bottom: 2rem;
        }
        .hero h1 {
            font-size: 2rem;
            font-weight: 700;
            color: #003366;
        }
        .hero p {
            font-size: 1rem;
            color: #333;
        }
        .stats-card {
            border: none;
            background: #ffffff;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 1rem;
            text-align: center;
            opacity: 0;
        }
        .stats-card i {
            font-size: 2rem;
            color: #003366;
            margin-bottom: 0.5rem;
        }
        .stats-card h5 {
            font-weight: 600;
            color: #003366;
        }
        .stats-card p {
            margin: 0;
            font-size: 0.85rem;
            color: #555;
        }
        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #003366;
            margin-bottom: 1rem;
        }
        .quick-links .card {
            border: none;
            border-radius: 10px;
            background: #ffffff;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            text-align: center;
            padding: 1rem;
            transition: transform 0.1s ease;
            opacity: 0;
        }
        .quick-links .card:hover {
            transform: scale(1.02);
        }
        .quick-links i {
            font-size: 2rem;
            color: #003366;
            margin-bottom: 0.5rem;
        }
        .quick-links h5 {
            font-size: 1rem;
            font-weight: 600;
            color: #003366;
            margin-bottom: 0.5rem;
        }
        footer {
            margin-top: 3rem;
            padding: 1rem;
            background: #003366;
            color: #ffffff;
            text-align: center;
            border-radius: 10px 10px 0 0;
        }
        footer p {
            margin: 0;
            font-size: 0.9rem;
        }
        .login-btn {
            background: #0069d9;
            color: #ffffff;
            transition: transform 0.1s ease, box-shadow 0.1s ease;
        }
        .login-btn:hover {
            background: #005bb5;
            transform: scale(1.05);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        @media (max-width: 576px) {
            .hero h1 {
                font-size: 1.5rem;
            }
        }
        .fw-semibold {
            font-weight: 600;
        }
        .text-primary {
            color: #003366 !important;
        }
    </style> -->
</head>
<body>

    <nav class="navbar navbar-light bg-light mb-4 animate__animated animate__fadeInDown">
        <div class="container-fluid">
            <a class="navbar-brand d-flex align-items-center" href="/">
                <i class="bi bi-archive-fill me-2" style="font-size:1.5rem;"></i> Gestión de Pacientes
            </a>
            <span class="navbar-text">
                {% if request.user.is_authenticated %}
                    Bienvenido, {{ request.user.username }} | <a href="{% url 'logout' %}">Cerrar sesión</a>
                {% else %}
                    <a href="{% url 'login' %}">Iniciar sesión</a>
                {% endif %}
            </span>
        </div>
    </nav>

        
    </nav>
    <div class="container animate__animated animate__fadeInUp" id="mainContent">
        <div class="mb-4">
            <h1 class="mb-4">{{ view.action|default:"Crear" }} FUID</h1>

            <div class="card mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Filtros</h5>
                </div>
                <div class="card-body">
                    <form method="get" id="filtro-form" class="row g-3">
                        {% csrf_token %}
                        <div class="col-md-4">
                            <label for="id_usuario" class="form-label fw-semibold">Filtrar por Usuario</label>
                            <select name="usuario" id="id_usuario" class="form-select">
                                <option value="">-- Seleccione un Usuario --</option>
                                {% for user in form.fields.usuario.queryset %}
                                    <option value="{{ user.id }}" {% if user.id|stringformat:"s" == request.GET.usuario %}selected{% endif %}>
                                        {{ user.username }}
                                    </option>
                                {% endfor %}
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="id_fecha_inicio" class="form-label fw-semibold">Fecha Inicio</label>
                            <input type="date" name="fecha_inicio" id="id_fecha_inicio" class="form-control" value="{{ request.GET.fecha_inicio }}">
                        </div>
                        <div class="col-md-4">
                            <label for="id_fecha_fin" class="form-label fw-semibold">Fecha Fin</label>
                            <input type="date" name="fecha_fin" id="id_fecha_fin" class="form-control" value="{{ request.GET.fecha_fin }}">
                        </div>
                        <div class="col-12 text-end mt-3">
                            <button type="submit" class="btn btn-primary">Filtrar</button>
                        </div>
                    </form>
                </div>
            </div>

            <div class="card">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Datos del FUID</h5>
                </div>
                <div class="card-body">
                    <form method="post">
                        {% csrf_token %}
                        {{ form.errors }}

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="{{ form.entidad_productora.id_for_label }}" class="form-label fw-semibold">Entidad Productora</label>
                                {{ form.entidad_productora|add_class:"form-control" }}
                            </div>
                            <div class="col-md-6">
                                <label for="{{ form.unidad_administrativa.id_for_label }}" class="form-label fw-semibold">Unidad Administrativa</label>
                                {{ form.unidad_administrativa|add_class:"form-control" }}
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="{{ form.oficina_productora.id_for_label }}" class="form-label fw-semibold">Oficina Productora</label>
                                {{ form.oficina_productora|add_class:"form-control" }}
                            </div>
                            <div class="col-md-6">
                                <label for="{{ form.objeto.id_for_label }}" class="form-label fw-semibold">Objeto</label>
                                {{ form.objeto|add_class:"form-control" }}
                            </div>
                        </div>

                        <h5 class="mt-4 mb-3 text-primary">Elaborado Por</h5>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="{{ form.elaborado_por_nombre.id_for_label }}" class="form-label fw-semibold">Nombre</label>
                                {{ form.elaborado_por_nombre|add_class:"form-control" }}
                            </div>
                            <div class="col-md-6">
                                <label for="{{ form.elaborado_por_cargo.id_for_label }}" class="form-label fw-semibold">Cargo</label>
                                {{ form.elaborado_por_cargo|add_class:"form-control" }}
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="{{ form.elaborado_por_lugar.id_for_label }}" class="form-label fw-semibold">Lugar</label>
                                {{ form.elaborado_por_lugar|add_class:"form-control" }}
                            </div>
                            <div class="col-md-6">
                                <label for="{{ form.elaborado_por_fecha.id_for_label }}" class="form-label fw-semibold">Fecha</label>
                                {{ form.elaborado_por_fecha|add_class:"form-control" }}
                            </div>
                        </div>

                        <h5 class="mt-4 mb-3 text-primary">Entregado Por</h5>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="{{ form.entregado_por_nombre.id_for_label }}" class="form-label fw-semibold">Nombre</label>
                                {{ form.entregado_por_nombre|add_class:"form-control" }}
                            </div>
                            <div class="col-md-6">
                                <label for="{{ form.entregado_por_cargo.id_for_label }}" class="form-label fw-semibold">Cargo</label>
                                {{ form.entregado_por_cargo|add_class:"form-control" }}
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="{{ form.entregado_por_lugar.id_for_label }}" class="form-label fw-semibold">Lugar</label>
                                {{ form.entregado_por_lugar|add_class:"form-control" }}
                            </div>
                            <div class="col-md-6">
                                <label for="{{ form.entregado_por_fecha.id_for_label }}" class="form-label fw-semibold">Fecha</label>
                                {{ form.entregado_por_fecha|add_class:"form-control" }}
                            </div>
                        </div>

                        <h5 class="mt-4 mb-3 text-primary">Recibido Por</h5>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="{{ form.recibido_por_nombre.id_for_label }}" class="form-label fw-semibold">Nombre</label>
                                {{ form.recibido_por_nombre|add_class:"form-control" }}
                            </div>
                            <div class="col-md-6">
                                <label for="{{ form.recibido_por_cargo.id_for_label }}" class="form-label fw-semibold">Cargo</label>
                                {{ form.recibido_por_cargo|add_class:"form-control" }}
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="{{ form.recibido_por_lugar.id_for_label }}" class="form-label fw-semibold">Lugar</label>
                                {{ form.recibido_por_lugar|add_class:"form-control" }}
                            </div>
                            <div class="col-md-6">
                                <label for="{{ form.recibido_por_fecha.id_for_label }}" class="form-label fw-semibold">Fecha</label>
                                {{ form.recibido_por_fecha|add_class:"form-control" }}
                            </div>
                        </div>

                        <h5 class="mt-4 mb-3 text-primary">Registros</h5>
                        <div class="mb-3">
                            <label for="{{ form.registros.id_for_label }}" class="form-label fw-semibold">Registros</label>
                            <div class="d-flex align-items-center gap-2">
                                {{ form.registros }}
                                <button type="button" class="btn btn-sm btn-outline-secondary" id="selectAllBtn">Seleccionar todos</button>
                            </div>
                        </div>

                        <div class="text-end">
                            <button type="submit" class="btn btn-success">Guardar</button>
                            <a href="{% url 'fuid_list' %}" class="btn btn-secondary">Cancelar</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <footer class="animate__animated animate__fadeInUp">
            <p>© {{ current_year }} Hospital del Sarare - Central de Archivos del Sarare. Todos los derechos reservados.</p>
        </footer>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const selectAllBtn = document.getElementById('selectAllBtn'); // Botón de seleccionar todos
            const checkboxes = document.querySelectorAll('input[name="registros"]'); // Todas las casillas de verificación del campo "registros"
    
            if (selectAllBtn && checkboxes.length > 0) {
                selectAllBtn.addEventListener('click', () => {
                    checkboxes.forEach(checkbox => {
                        checkbox.checked = true; // Marca cada casilla como seleccionada
                    });
                });
            }
        });
    </script>
    
</body>
</html>


### .\documentos\templates\fuid_list.html ###
{% load custom_filters %}
{% load static %}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de FUIDs</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">

    <!-- Animate.css -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    
    <!-- Anime.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js"></script>

    <!-- <style>
        body {
            background: linear-gradient(135deg, #ffffff, #f0f0f0);
            font-family: Arial, sans-serif;
        }
        .navbar {
            background-color: #003366 !important;
        }
        .navbar-brand, .navbar-nav .nav-link, .navbar-text a {
            color: #ffffff !important;
            transition: color 0.2s ease;
        }
        .navbar-nav .nav-link:hover {
            color: #cce5ff !important;
        }
        h1 {
            color: #003366;
            font-weight: 700;
        }
        .btn-primary {
            background-color: #0069d9 !important;
            border: none;
            transition: transform 0.2s ease;
        }
        .btn-primary:hover {
            background-color: #005bb5 !important;
            transform: scale(1.05);
        }
        .table {
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        .table-striped tbody tr:hover {
            background-color: #f8f9fa;
        }
        .btn-warning {
            background-color: #ffc107 !important;
            border: none;
            transition: transform 0.2s ease;
        }
        .btn-warning:hover {
            background-color: #e0a800 !important;
            transform: scale(1.05);
        }
        .btn-info {
            background-color: #17a2b8 !important;
            border: none;
            transition: transform 0.2s ease;
        }
        .btn-info:hover {
            background-color: #138496 !important;
            transform: scale(1.05);
        }

        /* Para la animación de aparición */
        #mainContainer {
            opacity: 0;
        }
        /* Fade-in al navbar */
        nav.navbar {
            opacity: 0;
        }
    </style> -->
</head>
<body>
    <nav class="navbar navbar-light bg-light mb-4 animate__animated animate__fadeInDown">
        <div class="container-fluid">
            <a class="navbar-brand d-flex align-items-center" href="/">
                <i class="bi bi-archive-fill me-2" style="font-size:1.5rem;"></i> Gestión de Pacientes
            </a>
            <span class="navbar-text">
                {% if request.user.is_authenticated %}
                    Bienvenido, {{ request.user.username }} | <a href="{% url 'logout' %}">Cerrar sesión</a>
                {% else %}
                    <a href="{% url 'login' %}">Iniciar sesión</a>
                {% endif %}
            </span>
        </div>
    </nav>

<div class="container animate__animated animate__fadeInUp" id="mainContainer">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="animate__animated animate__fadeInDown">Lista de FUIDs</h1>
        <a href="{% url 'crear_fuid' %}" class="btn btn-primary animate__animated animate__fadeInDown animate__delay-1s">
            <i class="bi bi-folder-plus"></i> Crear FUID
        </a>
    </div>

    <table class="table table-striped table-bordered animate__animated animate__fadeInUp animate__delay-1s" id="fuidTable">
        <thead>
            <tr>
                <th>ID</th>
                <th>Entidad Productora</th>
                <th>Unidad Administrativa</th>
                <th>Oficina Productora</th>
                <th>Objeto</th>
                <th>Fecha de Creación</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            {% for fuid in fuids %}
            <tr>
                <td>{{ fuid.id }}</td>
                <td>{{ fuid.entidad_productora }}</td>
                <td>{{ fuid.unidad_administrativa }}</td>
                <td>{{ fuid.oficina_productora }}</td>
                <td>{{ fuid.objeto }}</td>
                <td>{{ fuid.fecha_creacion|date:"Y-m-d" }}</td>
                <td>
                    <a href="{% url 'editar_fuid' fuid.id %}" class="btn btn-warning btn-sm"><i class="bi bi-pencil-square"></i> Editar</a>
                    <a href="{% url 'detalle_fuid' fuid.id %}" class="btn btn-info btn-sm"><i class="bi bi-eye"></i> Ver</a>
                </td>
            </tr>
            {% empty %}
            <tr>
                <td colspan="7" class="text-center">No hay FUIDs registrados.</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Animar el contenedor principal con Anime.js
        anime({
            targets: '#mainContainer',
            opacity: [0,1],
            duration: 800,
            easing: 'easeOutExpo'
        });

        // Animar las filas de la tabla
        anime({
            targets: '#fuidTable tbody tr',
            opacity: [0,1],
            translateY: [20,0],
            duration: 500,
            delay: anime.stagger(100),
            easing: 'easeOutExpo'
        });

        // Animar el navbar
        anime({
            targets: 'nav.navbar',
            opacity: [0,1],
            duration: 500,
            easing: 'easeOutExpo'
        });
    });
</script>
</body>
</html>

<!-- python manage.py makemigrations
python manage.py migrate -->


### .\documentos\templates\lista_fichas_paciente.html ###
{% load static %}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Fichas de Pacientes</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js"></script>

    <!-- <style>
        .table td, .table th {
            font-size: 0.85rem; 
            white-space: nowrap; 
            overflow: hidden;
            text-overflow: ellipsis; 
        }
        body {
            background: linear-gradient(135deg, #ffffff, #f0f0f0);
            font-family: Arial, sans-serif;
        }
        .navbar {
            background-color: #003366 !important;
        }
        .navbar-brand, .navbar-nav .nav-link, .navbar-text a {
            color: #ffffff !important;
            transition: color 0.2s ease;
        }
        .navbar-nav .nav-link:hover {
            color: #cce5ff !important;
        }
        h1 {
            color: #003366;
            font-weight: 700;
        }
        .btn-primary {
            background-color: #0069d9 !important;
            border: none;
            transition: transform 0.2s ease;
        }
        .btn-primary:hover {
            background-color: #005bb5 !important;
            transform: scale(1.05);
        }
        .table {
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        .table-striped tbody tr:hover {
            background-color: #f8f9fa;
        }
        .btn-warning {
            background-color: #ffc107 !important;
            border: none;
            transition: transform 0.2s ease;
        }
        .btn-warning:hover {
            background-color: #e0a800 !important;
            transform: scale(1.05);
        }
        .btn-info {
            background-color: #17a2b8 !important;
            border: none;
            transition: transform 0.2s ease;
        }
        .btn-info:hover {
            background-color: #138496 !important;
            transform: scale(1.05);
        }

        .col-nombre-completo {
            width: 35%;
        }

        .estado-activo {
            background-color: #d4edda !important;
            color: #155724 !important;
            font-weight: bold;
            text-align: center;
        }
        .estado-pasivo {
            background-color: #cce5ff !important;
            color: #004085 !important;
            font-weight: bold;
            text-align: center;
        }

        #mainContainer {
            opacity: 0;
        }
        nav.navbar {
            opacity: 0;
        }
    </style> -->
    <style>.dataTables_filter {
        display: none;
    }
    </style>
</head>
<body>
<nav class="navbar navbar-light bg-light mb-4 animate__animated animate__fadeInDown">
    <div class="container-fluid">
        <a class="navbar-brand d-flex align-items-center" href="/">
            <i class="bi bi-archive-fill me-2" style="font-size:1.5rem;"></i> Gestión de Pacientes
        </a>
        <span class="navbar-text">
            {% if request.user.is_authenticated %}
                Bienvenido, {{ request.user.username }} | <a href="{% url 'logout' %}">Cerrar sesión</a>
            {% else %}
                <a href="{% url 'login' %}">Iniciar sesión</a>
            {% endif %}
        </span>
    </div>
</nav>

<div class="container animate__animated animate__fadeInUp" id="mainContainer">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="animate__animated animate__fadeInDown">Lista de Fichas de Pacientes</h1>
        <a href="{% url 'crear_ficha' %}" class="btn btn-primary animate__animated animate__fadeInDown animate__delay-1s">
            <i class="bi bi-folder-plus"></i> Crear Ficha
        </a>
    </div>

    <!-- Filtros adicionales -->
    <div class="row mb-3">
        <div class="col-md-2">
            <input type="date" id="fecha_inicio" class="form-control" placeholder="Fecha inicio">
        </div>
        <div class="col-md-2">
            <input type="date" id="fecha_fin" class="form-control" placeholder="Fecha fin">
        </div>
        <div class="col-md-2">
            <input type="text" id="filtro_identificacion" class="form-control" placeholder="Número de Identificación">
        </div>
        <div class="col-md-2">
            <input type="text" id="filtro_historia" class="form-control" placeholder="Número Historia Clínica">
        </div>
        <div class="col-md-2">
            <input type="text" id="filtro_nombre" class="form-control" placeholder="Nombre (exacto)">
        </div>
        <div class="col-md-2">
            <input type="text" id="filtro_similar" class="form-control" placeholder="Búsqueda por similitud">
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-md-3">
            <button id="filtrar" class="btn btn-primary">Filtrar</button>
        </div>
    </div>
    
    <table class="table table-striped table-bordered animate__animated animate__fadeInUp animate__delay-1s" id="fichasTable">
        <thead>
            <tr>
                <th>ID</th>
                <th class="col-nombre-completo">Nombre Completo</th>
                <th>Tipo de Documento</th>
                <th>Número de Identificación</th>
                <th>Sexo</th>
                <th>Estado</th>
                <th>Fecha de Nacimiento</th>
                <th>Número Historia Clínica</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <!-- <tfoot>
            <tr>
                <th>ID</th>
                <th>Nombre Completo</th>
                <th>Tipo de Documento</th>
                <th>Número de Identificación</th>
                <th>Sexo</th>
                <th>Estado</th>
                <th>Fecha de Nacimiento</th>
                <th>Número Historia Clínica</th>
                <th>Acciones</th>
            </tr>
        </tfoot> -->
        <tbody>
            {% for ficha in fichas %}
            <tr>
                <td>{{ ficha.consecutivo }}</td>
                <td>{{ ficha.primer_nombre }} {{ ficha.segundo_nombre }} {{ ficha.primer_apellido }} {{ ficha.segundo_apellido }}</td>
                <td>{{ ficha.tipo_identificacion }}</td>
                <td>{{ ficha.num_identificacion }}</td>
                <td>{{ ficha.sexo }}</td>
                <td class="{% if ficha.activo %}estado-activo{% else %}estado-pasivo{% endif %}">
                    {% if ficha.activo %}Activo{% else %}Pasivo{% endif %}
                </td>
                <td>{{ ficha.fecha_nacimiento|date:"Y-m-d" }}</td>
                <td>{{ ficha.Numero_historia_clinica }}</td>
                <td>
                    <a href="{% url 'editar_ficha' ficha.consecutivo %}" class="btn btn-warning btn-sm">
                        <i class="bi bi-pencil-square"></i> Editar
                    </a>
                    <a href="{% url 'detalle_ficha' ficha.consecutivo %}" class="btn btn-info btn-sm">
                        <i class="bi bi-eye"></i> Ver
                    </a>
                </td>
            </tr>
            {% empty %}
            <tr>
                <td colspan="9" class="text-center">No hay fichas registradas.</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>

<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<script src="https://cdn.datatables.net/plug-ins/1.13.6/i18n/es-ES.json"></script>
<script>
    $(document).ready(function() {
        var table = $('#fichasTable').DataTable({
            pageLength: 250,
            lengthMenu: [10, 50, 100, 250],
            processing: true,
            serverSide: true,
            ajax: {
                url: "{% url 'api_lista_fichas' %}",
                type: "GET",
                data: function(d) {
                    d.fecha_inicio = $('#fecha_inicio').val();
                    d.fecha_fin = $('#fecha_fin').val();
                    d.filtro_identificacion = $('#filtro_identificacion').val();
                    d.filtro_historia = $('#filtro_historia').val();
                    d.filtro_nombre = $('#filtro_nombre').val();
                    d.filtro_similar = $('#filtro_similar').val();
                }
            },
            language: {
                url: "https://cdn.datatables.net/plug-ins/1.13.6/i18n/es-ES.json"
            },
            columns: [
                { data: "consecutivo" },
                { data: "nombre_completo" },
                { data: "tipo_identificacion" },
                { data: "num_identificacion" },
                { data: "sexo" },
                { data: "estado", render: function(data) {
                    return data ? '<span class="estado-activo">Activo</span>' : '<span class="estado-pasivo">Pasivo</span>';
                }},
                { data: "fecha_nacimiento" },
                { data: "numero_historia_clinica" },
                { data: null, render: function(data) {
                    return '<a href="/editar-ficha/'+data.consecutivo+'" class="btn btn-warning btn-sm">Editar</a> ' +
                           '<a href="/detalle-ficha/'+data.consecutivo+'" class="btn btn-info btn-sm">Ver</a>';
                }}
            ],
            initComplete: function() {
                // Buscadores por columna en el footer
                this.api().columns().every(function() {
                    var column = this;
                    $('tfoot th').eq(column.index()).html('<input type="text" class="form-control form-control-sm" placeholder="Buscar...">');
                });

                // Filtro avanzado por rangos y campos
                $('#filtrar').on('click', function() {
                    table.ajax.reload();
                });
            }
        });

        // Animación para las filas de la tabla
        $('#fichasTable').on('draw.dt', function() {
            anime({
                targets: '#fichasTable tbody tr',
                translateX: [-10, 0],
                opacity: [0, 1],
                easing: 'easeOutExpo',
                duration: 500,
                delay: anime.stagger(50)
            });
        });
    });
</script>


<script>
    document.addEventListener('DOMContentLoaded', () => {
        anime({
            targets: '#mainContainer',
            opacity: [0,1],
            duration: 800,
            easing: 'easeOutExpo'
        });
        anime({
            targets: '#fichasTable tbody tr',
            opacity: [0,1],
            translateY: [20,0],
            duration: 500,
            delay: anime.stagger(100),
            easing: 'easeOutExpo'
        });
        anime({
            targets: 'nav.navbar',
            opacity: [0,1],
            duration: 500,
            easing: 'easeOutExpo'
        });
    });
</script>
</body>
</html>


### .\documentos\templates\pagina_estadisticas.html ###
{% extends "adminlte/base.html" %}
{% load static %}

{% block content %}
<style>
.main-sidebar {
    width: 0 !important; /* Reduce el ancho a cero */
    min-width: 0 !important; /* Elimina restricciones de ancho mínimo */
    max-width: 0 !important; /* Elimina restricciones de ancho máximo */
    overflow: hidden !important; /* Oculta cualquier contenido interno */
}

.wrapper {
    margin-left: 0 !important; /* Ajusta el diseño general */
}

.content-wrapper {
    margin-left: 0 !important; /* Elimina el margen reservado */
    width: 100% !important; /* Expande el contenido para ocupar todo el ancho */
}

.main-footer {
    margin-left: 0 !important; /* Ajusta el pie de página */
}

  
  .main-header {
      display: none; /* Oculta la barra superior */
  }
  .custom-frame {
    border: 5px solid #007bff; /* Color y grosor del marco */
    border-radius: 15px; /* Bordes redondeados */
    padding: 20px; /* Espaciado interno */
    margin: 20px auto; /* Espaciado externo centrado */
    background-color: #f8f9fa; /* Fondo claro dentro del marco */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Sombra suave */
}

.main-footer {
    display: none !important; /* Oculta el pie de página completamente */
}
 
  
  </style>
  
<style>
canvas {
  max-height: 600px;
  max-width: 200%;
}

/* Añadir sombras y bordes a las tarjetas */
.card {
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Sombra suave */
  border: 1px solid #ddd; /* Borde sutil */
  border-radius: 10px; /* Bordes redondeados */
  transition: transform 0.2s, box-shadow 0.2s; /* Transición al pasar el ratón */
}

.card:hover {
  transform: translateY(-5px); /* Elevar ligeramente la tarjeta al pasar el ratón */
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3); /* Intensificar la sombra */
}

/* Encabezados de las tarjetas */
.card-header {
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;
  background-color: #f8f9fa; /* Fondo claro para contraste */
  border-bottom: 1px solid #ddd; /* Línea divisoria */
}

.card-title {
  font-weight: bold;
  color: #333; /* Color del texto */
}
</style>

{% block content-header %}
<!-- Barra personalizada independiente -->
<div class="custom-frame">
  <div class="content-header">
      <!-- Barra personalizada -->
      <nav class="navbar navbar-light bg-light mb-4 animate__animated animate__fadeInDown">
          <div class="container-fluid">
              <a class="navbar-brand d-flex align-items-center" href="/">
                  <i class="bi bi-archive-fill me-2" style="font-size:1.5rem;"></i> Gestión de Pacientes
              </a>
              <span class="navbar-text">
                  {% if request.user.is_authenticated %}
                      Bienvenido, {{ request.user.username }} | 
                      <a href="{% url 'logout' %}">Cerrar sesión</a>
                  {% else %}
                      <a href="{% url 'login' %}">Iniciar sesión</a>
                  {% endif %}
              </span>
          </div>
      </nav>
  </div>

  <div class="content">
      <div class="container-fluid">
        <div class="content">
          <div class="container-fluid">
        
            <!-- Tarjetas de resumen -->
            <div class="row">
              <div class="col-lg-3 col-6">
                <div class="small-box bg-info card">
                  <div class="inner">
                    <h3 id="totalRegistros">0</h3>
                    <p>Total de Registros</p>
                  </div>
                  <div class="icon">
                    <i class="fas fa-folder-open"></i>
                  </div>
                </div>
              </div>
              <div class="col-lg-3 col-6">
                <div class="small-box bg-success card">
                  <div class="inner">
                    <h3 id="totalFuids">0</h3>
                    <p>Total de FUIDs</p>
                  </div>
                  <div class="icon">
                    <i class="fas fa-file-alt"></i>
                  </div>
                </div>
              </div>
              <div class="col-lg-3 col-6">
                <div class="small-box bg-warning card">
                  <div class="inner">
                    <h3 id="totalPacientes">0</h3>
                    <p>Total de Pacientes</p>
                  </div>
                  <div class="icon">
                    <i class="fas fa-users"></i>
                  </div>
                </div>
              </div>
              <div class="col-lg-3 col-6">
                <div class="small-box bg-primary card">
                  <div class="inner">
                    <h3 id="pacientesActivos">0%</h3>
                    <p>Pacientes Activos</p>
                  </div>
                  <div class="icon">
                    <i class="fas fa-user-check"></i>
                  </div>
                </div>
              </div>
            </div>
        
            <!-- Gráficos alineados en una fila -->
            <div class="row justify-content-center align-items-center">
              <!-- Distribución por Género -->
              <div class="col-lg-4">
                <div class="card card-primary text-center">
                  <div class="card-header">
                    <h3 class="card-title">Distribución por Género</h3>
                  </div>
                  <div class="card-body">
                    <canvas id="chartPacientesGenero"></canvas>
                  </div>
                </div>
              </div>
            
              <!-- Tipos de Identificación -->
              <div class="col-lg-4">
                <div class="card card-info text-center">
                  <div class="card-header">
                    <h3 class="card-title">Tipos de Identificación</h3>
                  </div>
                  <div class="card-body">
                    <canvas id="chartTipoIdentificacion"></canvas>
                  </div>
                </div>
              </div>
            
              <!-- Distribución por Grupo de Edad -->
              <div class="col-lg-4">
                <div class="card card-secondary text-center">
                  <div class="card-header">
                    <h3 class="card-title">Distribución por Grupo de Edad</h3>
                  </div>
                  <div class="card-body">
                    <canvas id="chartPacientesEdad"></canvas>
                  </div>
                </div>
              </div>
            </div>
        
          </div><!-- /.container-fluid -->
        </div><!-- /.content -->
      </div>
  </div>
</div>

{% endblock %}



<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  // Peticiones a las APIs
  Promise.all([
    fetch("http://127.0.0.1:8000/registros/estadisticas/registros/").then(r => r.json()),
    fetch("http://127.0.0.1:8000/registros/estadisticas/fuids/").then(r => r.json()),
    fetch("http://127.0.0.1:8000/registros/estadisticas/pacientes/").then(r => r.json()),
  ])
  .then(([dataReg, dataFuid, dataPac]) => {
    // Actualizar tarjetas
    document.getElementById('totalRegistros').innerText = dataReg.total_registros || 0;
    document.getElementById('totalFuids').innerText = dataFuid.total_fuids || 0;
    document.getElementById('totalPacientes').innerText = dataPac.total_pacientes || 0;
    document.getElementById('pacientesActivos').innerText = `${((dataPac.activos / dataPac.total_pacientes) * 100).toFixed(2)}%`;

    // Gráfico: Distribución por Género
    const ctxGenero = document.getElementById('chartPacientesGenero').getContext('2d');
    const generoData = dataPac.por_genero || [];
    const labelsGenero = generoData.map(item => item.sexo || 'N/A');
    const dataGenero = generoData.map(item => item.cantidad);

    new Chart(ctxGenero, {
      type: 'pie',
      data: {
        labels: labelsGenero,
        datasets: [{
          data: dataGenero,
          backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'], // Colores variados
          borderWidth: 1,
        }]
      },
      options: {
        plugins: {
          legend: { position: 'top' },
          tooltip: { enabled: true },
        }
      }
    });

    // Gráfico: Tipos de Identificación
    const ctxIdentificacion = document.getElementById('chartTipoIdentificacion').getContext('2d');
    const idData = dataPac.por_tipo_identificacion || [];
    const labelsId = idData.map(item => item.tipo_identificacion || 'N/A');
    const dataId = idData.map(item => item.cantidad);

    new Chart(ctxIdentificacion, {
      type: 'bar',
      data: {
        labels: labelsId,
        datasets: [{
          label: 'Pacientes',
          data: dataId,
          backgroundColor: [
            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'
          ], // Colores distintos por barra
          borderColor: [
            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'
          ],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: false },
          tooltip: { enabled: true },
        },
        scales: {
          y: { beginAtZero: true, title: { display: true, text: 'Cantidad' } },
          x: { title: { display: true, text: 'Tipo de Identificación' } }
        }
      }
    });

    // Gráfico: Distribución por Grupo de Edad
    const ctxEdad = document.getElementById('chartPacientesEdad').getContext('2d');
    const gruposEdad = dataPac.grupos_edad || {};
    const labelsEdad = Object.keys(gruposEdad);
    const dataEdad = Object.values(gruposEdad);

    new Chart(ctxEdad, {
      type: 'bar',
      data: {
        labels: labelsEdad,
        datasets: [{
          label: 'Pacientes',
          data: dataEdad,
          backgroundColor: [
            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'
          ], // Colores variados
          borderColor: [
            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'
          ],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: false },
          tooltip: { enabled: true },
        },
        scales: {
          y: { beginAtZero: true, title: { display: true, text: 'Cantidad' } },
          x: { title: { display: true, text: 'Grupos de Edad' } }
        }
      }
    });
  })
  .catch(error => {
    console.error('Error al cargar estadísticas:', error);
  });
</script>

{% endblock %}


### .\documentos\templates\registro_completo.html ###
{% load custom_filters %}
{% load static %}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="description" content="Visualización completa de todos los campos del registro documental con filtros por columna.">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Tabla Completa de Registros</title>
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- DataTables CSS -->
    <link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css" rel="stylesheet">
    <!-- Animate.css -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">


</head>

<body>
    <nav class="navbar navbar-light bg-light mb-4 animate__animated animate__fadeInDown animate__delay-1s">
        <div class="container-fluid">
            <a class="navbar-brand d-flex align-items-center" href="/">
                <i class="bi bi-archive-fill text-primary me-2" style="font-size:1.5rem;"></i>
                Gestión de Archivos
            </a>
            <span class="navbar-text">
                {% if request.user.is_authenticated %}
                    Bienvenido, {{ request.user.username }} | <a href="{% url 'logout' %}">Cerrar sesión</a>
                {% else %}
                    <a href="{% url 'login' %}">Iniciar sesión</a>
                {% endif %}
            </span>
        </div>
    </nav>

    <div class="container-fluid animate__animated animate__fadeInUp" id="mainContainer">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h1 class="animate__animated animate__fadeInDown">Registros Completos</h1>
            <a href="{% url 'crear_registro' %}" class="btn btn-success btn-sm animate__animated animate__fadeInDown animate__delay-1s">
                <i class="bi bi-plus-circle"></i> Nuevo
            </a>
        </div>

        <div class="table-responsive" style="overflow-x:auto;">
            <table id="tablaCompleta" class="table table-striped table-bordered animate__animated animate__fadeInUp animate__delay-1s">
                <thead>
                    <tr>
                        <th style="width: 80px;">Número de Orden</th>
                        <th style="width: 170px;">Código</th>
                        <th style="width: 170px;">Código de Serie</th>
                        <th style="width: 170px;">Código de Subserie</th>
                        <th style="width: 200px;">Unidad Documental</th>
                        <th style="width: 120px;">Fecha de Archivo</th>
                        <th style="width: 120px;">Fecha Inicial</th>
                        <th style="width: 120px;">Fecha Final</th>
                        <th style="width: 60px;">Soporte Físico</th>
                        <th style="width: 60px;">Soporte Electrónico</th>
                        <th style="width: 100px;">Caja</th>
                        <th style="width: 100px;">Carpeta</th>
                        <th style="width: 120px;">Tomo/Legajo</th>
                        <th style="width: 100px;">Número de Folios</th>
                        <th style="width: 120px;">Tipo</th>
                        <th style="width: 100px;">Cantidad</th>
                        <th style="width: 150px;">Ubicación</th>
                        <th style="width: 120px;">Cantidad Electrónica</th>
                        <th style="width: 150px;">Tamaño Electrónico</th>
                        <th style="width: 200px;">Notas</th>
                        <th style="width: 150px;">Creado Por</th>
                        <th style="width: 120px;">Fecha de Creación</th>
                        <th style="width: 150px;">Acciones</th>
                    </tr>
                    <tr>
                        <th><input type="text" placeholder="Número de Orden" /></th>
                        <th><input type="text" placeholder="Código" /></th>
                        <th><input type="text" placeholder="Código de Serie" /></th>
                        <th><input type="text" placeholder="Código de Subserie" /></th>
                        <th><input type="text" placeholder="Unidad Documental" /></th>
                        <th><input type="text" placeholder="Fecha de Archivo" /></th>
                        <th><input type="text" placeholder="Fecha Inicial" /></th>
                        <th><input type="text" placeholder="Fecha Final" /></th>
                        <th><input type="text" placeholder="Soporte Físico" /></th>
                        <th><input type="text" placeholder="Soporte Electrónico" /></th>
                        <th><input type="text" placeholder="Caja" /></th>
                        <th><input type="text" placeholder="Carpeta" /></th>
                        <th><input type="text" placeholder="Tomo/Legajo" /></th>
                        <th><input type="text" placeholder="Número de Folios" /></th>
                        <th><input type="text" placeholder="Tipo" /></th>
                        <th><input type="text" placeholder="Cantidad" /></th>
                        <th><input type="text" placeholder="Ubicación" /></th>
                        <th><input type="text" placeholder="Cant. Electrónica" /></th>
                        <th><input type="text" placeholder="Tamaño Electrónico" /></th>
                        <th><input type="text" placeholder="Notas" /></th>
                        <th><input type="text" placeholder="Creado Por" /></th>
                        <th><input type="text" placeholder="Fecha de Creación" /></th>
                        <th></th>
                    </tr>
                </thead>
                
                <tbody>
                    {% for registro in registros %}
                    <tr>
                        <td>{{ registro.numero_orden }}</td>
                        <td>{{ registro.codigo }}</td>
                        <td>{{ registro.codigo_serie }}</td>
                        <td>{{ registro.codigo_subserie }}</td>
                        <td>{{ registro.unidad_documental }}</td>
                        <td>{{ registro.fecha_archivo }}</td>
                        <td>{{ registro.fecha_inicial }}</td>
                        <td>{{ registro.fecha_final }}</td>
                        <td>{% if registro.soporte_fisico %}✔{% else %}✖{% endif %}</td>
                        <td>{% if registro.soporte_electronico %}✔{% else %}✖{% endif %}</td>
                        <td>{{ registro.caja }}</td>
                        <td>{{ registro.carpeta }}</td>
                        <td>{{ registro.tomo_legajo_libro }}</td>
                        <td>{{ registro.numero_folios }}</td>
                        <td>{{ registro.tipo }}</td>
                        <td>{{ registro.cantidad }}</td>
                        <td>{{ registro.ubicacion }}</td>
                        <td>{{ registro.cantidad_documentos_electronicos }}</td>
                        <td>{{ registro.tamano_documentos_electronicos }}</td>
                        <td>{{ registro.notas }}</td>
                        <td>{{ registro.creado_por }}</td>
                        <td>{{ registro.fecha_creacion }}</td>
                        <td>
                            <a href="{% url 'editar_registro' registro.id %}" class="btn btn-warning btn-sm"><i class="bi bi-pencil"></i> Editar</a>
                            <a href="{% url 'eliminar_registro' registro.id %}" class="btn btn-danger btn-sm"><i class="bi bi-trash"></i> Eliminar</a>
                        </td>
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="22" class="text-center">No hay registros disponibles.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.2/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.bootstrap5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.html5.min.js"></script>

    <script>
        $(document).ready(function() {
            // Configuración de la tabla DataTables
            var table = $('#tablaRegistros').DataTable({
    language: {
        processing: "Procesando...",
        search: "Buscar:",
        lengthMenu: "Mostrar _MENU_ registros",
        info: "Mostrando _START_ a _END_ de _TOTAL_ registros",
        infoEmpty: "No hay registros disponibles",
        infoFiltered: "(filtrado de _MAX_ registros totales)",
        infoPostFix: "",
        loadingRecords: "Cargando...",
        zeroRecords: "No se encontraron resultados",
        emptyTable: "No hay datos disponibles en la tabla",
        paginate: {
            first: "Primero",
            previous: "Anterior",
            next: "Siguiente",
            last: "Último"
        },
        aria: {
            sortAscending: ": activar para ordenar la columna ascendente",
            sortDescending: ": activar para ordenar la columna descendente"
        }
    },
    paging: true,
    searching: true,
    ordering: true,
    info: true,
    responsive: true,
    pageLength: 10,
    dom: 'frtip'
});

            // Aplicar la búsqueda por columna
            $('#tablaCompleta thead tr:eq(1) th input').on('keyup change', function () {
                var columnIndex = $(this).parent().index();
                table.column(columnIndex).search(this.value).draw();
            });
        });

        document.addEventListener('DOMContentLoaded', () => {
            // Animar el navbar
            anime({
                targets: 'nav.navbar',
                opacity: [0,1],
                translateY: [-20,0],
                duration: 800,
                easing: 'easeOutExpo'
            });

            // Animar el contenedor principal
            anime({
                targets: '#mainContainer',
                opacity: [0,1],
                duration: 800,
                easing: 'easeOutExpo',
                delay: 300
            });

            // Animar las filas de la tabla
            anime({
                targets: '#tablaCompleta tbody tr',
                opacity: [0,1],
                translateY: [20,0],
                duration: 500,
                delay: anime.stagger(50),
                easing: 'easeOutExpo'
            });
        });
    </script>
</body>
</html>


### .\documentos\templates\registro_form.html ###
{% extends 'base.html' %}
{% load custom_filters %}
{% load static %}
{% block title %}Formulario de Registro{% endblock %}
{% block content %}
<!-- Cargamos Animate.css y Anime.js aquí mismo para animaciones -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
<script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js"></script>

<!-- Estilos internos -->
<!-- <style>
    .hidden {
        display: none;
    }

    /* Transición suave en botones y tarjetas */
    .btn, .card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    .btn:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .card:hover {
        box-shadow: 0 8px 16px rgba(0,0,0,0.1);
    }

    .animate-delay-1s {
        animation-delay: 1s;
    }
</style> -->

<!-- Botón Volver -->
<a href="{% url 'lista_registros' %}" class="btn btn-secondary mb-3 animate__animated animate__fadeInLeft">
    <i class="bi bi-arrow-left"></i> Volver al listado
</a>

<div class="container py-4 animate__animated animate__fadeInUp animate-delay-1s" id="formContainer">
    <h1 class="mb-4 animate__animated animate__fadeInDown" id="formTitle">Registro de Archivo</h1>
    <form method="post" action="{% url 'crear_registro' %}" class="card p-4 shadow-sm">
        {% csrf_token %}
        {{ form.errors }}

        <div class="mb-3">
            <label for="{{ form.numero_orden.id_for_label }}" class="form-label">Número de Orden</label>
            {{ form.numero_orden|add_class:"form-control" }}
        </div>

        <div class="mb-3">
            <label for="{{ form.codigo.id_for_label }}" class="form-label">Código</label>
            {{ form.codigo|add_class:"form-control" }}
        </div>

        <div class="mb-3">
            <label for="{{ form.codigo_serie.id_for_label }}" class="form-label">Serie</label>
            {{ form.codigo_serie|add_class:"form-select" }}
        </div>

        <div class="mb-3">
            <label for="{{ form.codigo_subserie.id_for_label }}" class="form-label">Subserie</label>
            {{ form.codigo_subserie|add_class:"form-select" }}
        </div>

        <div class="mb-3">
            <label for="{{ form.unidad_documental.id_for_label }}" class="form-label">Unidad Documental</label>
            {{ form.unidad_documental|add_class:"form-control" }}
        </div>

        <div class="mb-3">
            <label for="{{ form.fecha_archivo.id_for_label }}" class="form-label">Fecha de Archivo</label>
            {{ form.fecha_archivo|add_class:"form-control" }}
        </div>

        <div class="mb-3">
            <label for="{{ form.fecha_inicial.id_for_label }}" class="form-label">Fecha Inicial</label>
            {{ form.fecha_inicial|add_class:"form-control" }}
        </div>

        <div class="mb-3">
            <label for="{{ form.fecha_final.id_for_label }}" class="form-label">Fecha Final</label>
            {{ form.fecha_final|add_class:"form-control" }}
        </div>

        <div class="form-check form-switch mb-3">
            {{ form.soporte_fisico }}
            <label class="form-check-label" for="{{ form.soporte_fisico.id_for_label }}">Soporte Físico</label>
        </div>

        <div class="form-check form-switch mb-3">
            {{ form.soporte_electronico }}
            <label class="form-check-label" for="{{ form.soporte_electronico.id_for_label }}">Soporte Electrónico</label>
        </div>

        <div id="soporteFisicoFields" class="border p-3 mb-3 hidden">
            <h5 class="mb-3">Datos de Soporte Físico</h5>
            <div class="mb-3">
                <label for="{{ form.caja.id_for_label }}" class="form-label">Caja</label>
                {{ form.caja|add_class:"form-control" }}
            </div>
            <div class="mb-3">
                <label for="{{ form.carpeta.id_for_label }}" class="form-label">Carpeta</label>
                {{ form.carpeta|add_class:"form-control" }}
            </div>
            <div class="mb-3">
                <label for="{{ form.tomo_legajo_libro.id_for_label }}" class="form-label">Tomo/Legajo/Libro</label>
                {{ form.tomo_legajo_libro|add_class:"form-control" }}
            </div>
            <div class="mb-3">
                <label for="{{ form.numero_folios.id_for_label }}" class="form-label">Número de Folios</label>
                {{ form.numero_folios|add_class:"form-control" }}
            </div>
            <div class="mb-3">
                <label for="{{ form.tipo.id_for_label }}" class="form-label">Tipo</label>
                {{ form.tipo|add_class:"form-control" }}
            </div>
            <div class="mb-3">
                <label for="{{ form.cantidad.id_for_label }}" class="form-label">Cantidad</label>
                {{ form.cantidad|add_class:"form-control" }}
            </div>
        </div>

        <div id="soporteElectronicoFields" class="border p-3 mb-3 hidden">
            <h5 class="mb-3">Datos de Soporte Electrónico</h5>
            <div class="mb-3">
                <label for="{{ form.ubicacion.id_for_label }}" class="form-label">Ubicación</label>
                {{ form.ubicacion|add_class:"form-control" }}
            </div>
            <div class="mb-3">
                <label for="{{ form.cantidad_documentos_electronicos.id_for_label }}" class="form-label">Cantidad de Documentos Electrónicos</label>
                {{ form.cantidad_documentos_electronicos|add_class:"form-control" }}
            </div>
            <div class="mb-3">
                <label for="{{ form.tamano_documentos_electronicos.id_for_label }}" class="form-label">Tamaño de los Documentos Electrónicos</label>
                {{ form.tamano_documentos_electronicos|add_class:"form-control" }}
            </div>
        </div>

        <div class="mb-3">
            <label for="{{ form.notas.id_for_label }}" class="form-label">Notas</label>
            {{ form.notas|add_class:"form-control" }}
        </div>

        <button type="submit" class="btn btn-primary"><i class="bi bi-save"></i> Guardar</button>
    </form>
</div>

<!-- Scripts para la lógica interna -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const serieField = document.querySelector('#id_codigo_serie');
        const subserieField = document.querySelector('#id_codigo_subserie');

        serieField.addEventListener('change', function () {
            const serieId = this.value;

            if (serieId) {
                fetch("{% url 'cargar_subseries' %}?serie_id=" + serieId)
                .then(response => response.json())
                    .then(data => {
                        subserieField.innerHTML = '<option value="">Seleccione una subserie</option>';
                        data.forEach(function (subserie) {
                            const option = document.createElement('option');
                            option.value = subserie.id;
                            option.textContent = subserie.nombre;
                            subserieField.appendChild(option);
                        });
                    })
                    .catch(error => console.error('Error al cargar subseries:', error));
            } else {
                subserieField.innerHTML = '<option value="">Seleccione una subserie</option>';
            }
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const soporteFisicoCheckbox = document.getElementById('{{ form.soporte_fisico.id_for_label }}');
        const soporteElectronicoCheckbox = document.getElementById('{{ form.soporte_electronico.id_for_label }}');
        const soporteFisicoFields = document.getElementById('soporteFisicoFields');
        const soporteElectronicoFields = document.getElementById('soporteElectronicoFields');

        function toggleFields() {
            if (soporteFisicoCheckbox.checked) {
                soporteFisicoFields.classList.remove('hidden');
            } else {
                soporteFisicoFields.classList.add('hidden');
            }

            if (soporteElectronicoCheckbox.checked) {
                soporteElectronicoFields.classList.remove('hidden');
            } else {
                soporteElectronicoFields.classList.add('hidden');
            }
        }

        soporteFisicoCheckbox.addEventListener('change', toggleFields);
        soporteElectronicoCheckbox.addEventListener('change', toggleFields);

        toggleFields();
    });
</script>

<!-- Animación con Anime.js -->
<script>
    document.addEventListener('DOMContentLoaded', () => {
        anime({
            targets: '#formTitle',
            translateY: [-30,0],
            opacity: [0,1],
            duration: 1000,
            easing: 'easeOutExpo'
        });

        anime({
            targets: '#formContainer',
            opacity: [0,1],
            translateX: [-50,0],
            duration: 1000,
            easing: 'easeOutExpo',
            delay: 500
        });
    });
</script>
{% endblock %}


### .\documentos\templates\registro_list.html ###
{% load static %}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Tabla de Registros</title>
    <meta name="description" content="Gestión de registros documentales con exportación y edición dinámica.">

    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- DataTables CSS -->
    <link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css" rel="stylesheet">
    <!-- Animate.css -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

    <!-- Tu CSS personalizado -->
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
</head>
<body>
    <!-- NAV -->
    <nav class="navbar navbar-light bg-light mb-4 animate__animated animate__fadeInDown animate__delay-1s">
        <div class="container-fluid">
            <a class="navbar-brand d-flex align-items-center" href="/">
                <i class="bi bi-archive-fill text-primary me-2" style="font-size:1.5rem;"></i>
                Gestión de Archivos
            </a>
            <span class="navbar-text">
                {% if request.user.is_authenticated %}
                    Bienvenido, {{ request.user.username }} | <a href="{% url 'logout' %}">Cerrar sesión</a>
                {% else %}
                    <a href="{% url 'login' %}">Iniciar sesión</a>
                {% endif %}
            </span>
        </div>
    </nav>

    <!-- CONTENIDO -->
    <div class="container-fluid mt-5">
        <!-- Encabezado -->
        <div class="d-flex justify-content-between align-items-center mb-3 animate__animated animate__fadeInDown">
            <!-- Título alineado a la izquierda con animación -->
            <h1 class="text-primary animate__animated animate__fadeInUp" id="pageTitle">Lista de Registros</h1>
            <!-- Botones alineados a la derecha con animaciones -->
            <div class="d-flex gap-2">
                <a href="{% url 'crear_registro' %}" class="btn btn-success animate__animated animate__zoomIn">
                    <i class="bi bi-file-earmark-plus"></i> Crear Nuevo Registro
                </a>
                <a href="{% url 'lista_completa_registros' %}" class="btn btn-info animate__animated animate__zoomIn animate__delay-1s">
                    <i class="bi bi-table"></i> Ver Tabla Completa
                </a>
            </div>
        </div>

        <!-- Tabla centrada -->
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-center">
                    <table id="tablaRegistros" class="table table-striped table-bordered tabla-ancha">
                        <thead>
                            <tr>
                                <th>N° Orden</th>
                                <th>Código</th>
                                <th>Código Serie</th>
                                <th>Código Subserie</th>
                                <th>Unidad Documental</th>
                                <th>Fecha de Archivo</th>
                                <th>Físico</th>
                                <th>Electrónico</th>
                                <th>Creado Por</th>
                                <th>Acciones</th>
                            </tr>
                            <tr>
                                <!-- Campos de búsqueda por columna -->
                                <th><input type="text" placeholder="Buscar N° Orden" /></th>
                                <th><input type="text" placeholder="Buscar Código" /></th>
                                <th><input type="text" placeholder="Buscar Código Serie" /></th>
                                <th><input type="text" placeholder="Buscar Código Subserie" /></th>
                                <th><input type="text" placeholder="Buscar Unidad Documental" /></th>
                                <th><input type="text" placeholder="Buscar Fecha Archivo" /></th>
                                <th><input type="text" placeholder="Buscar Físico" /></th>
                                <th><input type="text" placeholder="Buscar Electrónico" /></th>
                                <th><input type="text" placeholder="Buscar Creado Por" /></th>
                                <th></th> <!-- Sin filtro para Acciones -->
                            </tr>
                        </thead>
                        <tbody>
                            {% for registro in registros %}
                            <tr class="animate__animated animate__fadeIn">
                                <td>{{ registro.numero_orden }}</td>
                                <td>{{ registro.codigo }}</td>
                                <td>{{ registro.codigo_serie }}</td>
                                <td>{{ registro.codigo_subserie }}</td>
                                <td>{{ registro.unidad_documental }}</td>
                                <td>{{ registro.fecha_archivo }}</td>
                                <td class="text-center">{% if registro.soporte_fisico %}✔{% else %}✖{% endif %}</td>
                                <td class="text-center">{% if registro.soporte_electronico %}✔{% else %}✖{% endif %}</td>
                                <td>{{ registro.creado_por }}</td>
                                <td>
                                    <a href="{% url 'editar_registro' registro.id %}" class="btn btn-warning btn-sm"><i class="bi bi-pencil"></i> Editar</a>
                                    <a href="{% url 'eliminar_registro' registro.id %}" class="btn btn-danger btn-sm"><i class="bi bi-trash"></i> Eliminar</a>
                                </td>
                            </tr>
                            {% empty %}
                            <tr class="animate__animated animate__fadeIn">
                                <td colspan="10" class="text-center">No hay registros disponibles.</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
    <script>
        $(document).ready(function() {
            // Configuración de la tabla DataTables
            var table = $('#tablaRegistros').DataTable({
    language: {
        processing: "Procesando...",
        search: "Buscar:",
        lengthMenu: "Mostrar _MENU_ registros",
        info: "Mostrando _START_ a _END_ de _TOTAL_ registros",
        infoEmpty: "No hay registros disponibles",
        infoFiltered: "(filtrado de _MAX_ registros totales)",
        infoPostFix: "",
        loadingRecords: "Cargando...",
        zeroRecords: "No se encontraron resultados",
        emptyTable: "No hay datos disponibles en la tabla",
        paginate: {
            first: "Primero",
            previous: "Anterior",
            next: "Siguiente",
            last: "Último"
        },
        aria: {
            sortAscending: ": activar para ordenar la columna ascendente",
            sortDescending: ": activar para ordenar la columna descendente"
        }
    },
    paging: true,
    searching: true,
    ordering: true,
    info: true,
    responsive: true,
    pageLength: 10,
    dom: 'frtip'
});



    
            // Búsqueda por columna (filtros individuales en los inputs del thead)
            $('#tablaRegistros thead input').on('keyup change', function () {
                var columnIndex = $(this).parent().index(); // Identifica el índice de la columna
                table.column(columnIndex).search(this.value).draw(); // Aplica el filtro a la columna
            });
        });
    </script>
    
</body>
</html>


<!-- #superprueba 12345 -->
<!-- python manage.py createsuperuser Eliana Archivo 123123-->
 <!-- eliana Jeanclaude12345 -->
    

### .\documentos\templates\welcome.html ###
{% load static %}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Central de Archivos del Sarare - Inicio</title>
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <!-- Custom Styles -->
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
    <!-- Anime.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js"></script>
</head>
<style>.card {
    height: 100%; /* Asegura que todas las tarjetas tengan la misma altura */
}

.card-body {
    display: flex;
    flex-direction: column;
    justify-content: space-between; /* Uniformidad en la distribución del contenido */
}

</style>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light mb-3 animate__animated animate__fadeInDown">
        <div class="container-fluid">
            <a class="navbar-brand d-flex align-items-center" href="#">
                <i class="bi bi-archive-fill me-2"></i> Hospital del Sarare
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mainNav" aria-controls="mainNav" aria-expanded="false" aria-label="Menu">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse justify-content-end" id="mainNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'fuid_list' %}">FUID</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'lista_registros' %}">Registros</a>
                    </li>
                    {% if request.user.is_authenticated %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'logout' %}">Cerrar sesión</a>
                        </li>
                    {% else %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'login' %}">Iniciar sesión</a>
                        </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>

    <div class="container animate__animated animate__fadeInUp" id="mainContent">
        <!-- Hero Section -->
        <div class="hero">
            <h1>Central de Archivos del Sarare</h1>
            <p>Bienvenido al sistema de gestión documental del Hospital del Sarare. Aquí podrás administrar la información archivística de forma organizada, segura y eficiente.</p>
            <p><strong>Misión:</strong> Garantizar la gestión eficiente y segura de la documentación producida por el Hospital del Sarare, facilitando el acceso a la información para la toma de decisiones y asegurando la conservación de la memoria institucional.</p>
            <p><strong>Visión:</strong> Ser la plataforma líder en la región en gestión documental, impulsando la innovación, la digitalización y el cumplimiento de los estándares archivísticos para fortalecer la transparencia, la accesibilidad y la optimización de recursos del Hospital del Sarare.</p>
        </div>

        <!-- Indicadores Clave -->
        <h2 class="section-title">Indicadores Clave</h2>
        <div class="row g-3 mb-4 justify-content-center" id="statsRow">
            <div class="col-md-3 col-sm-6">
                <div class="stats-card">
                    <i class="bi bi-folder"></i>
                    <h5>Central de documentos</h5>
                    <p class="text-muted">{{ total_registros }} Consultar, subir y bajar archivos</p>
                </div>
            </div>
            <div class="col-md-3 col-sm-6">
                <a href="{% url 'pagina_estadisticas' %}" class="text-decoration-none">
                    <div class="stats-card">
                        <i class="bi bi-bar-chart"></i>
                        <h5>Estadísticas Tarjetero</h5>
                        <p class="text-muted">Consulta las estadísticas del tarjetero índice</p>
                    </div>
                </a>
            </div>
            <div class="col-md-3 col-sm-6">
                <a href="{% url 'lista_fichas' %}" class="text-decoration-none">
                    <div class="stats-card">
                        <i class="bi bi-clipboard-data"></i>
                        <h5>Lista de Fichas</h5>
                        <p class="text-muted">Consultar todas las fichas registradas</p>
                    </div>
                </a>
            </div>
        </div>

        <!-- Accesos Rápidos -->
        <h2 class="section-title">Accesos Rápidos</h2>
        <div class="row quick-links g-3 mb-4" id="quickLinksRow">
            <div class="col-md-3 col-sm-6">
                <a href="{% url 'fuid_form' %}" class="text-decoration-none">
                    <div class="card">
                        <i class="bi bi-folder-plus"></i>
                        <h5>Crear FUID</h5>
                        <p>Iniciar nuevo formulario</p>
                    </div>
                </a>
            </div>
            <div class="col-md-3 col-sm-6">
                <a href="{% url 'fuid_list' %}" class="text-decoration-none">
                    <div class="card">
                        <i class="bi bi-card-list"></i>
                        <h5>Lista de FUID</h5>
                        <p>Ver todos los FUID generados</p>
                    </div>
                </a>
            </div>
            <div class="col-md-3 col-sm-6">
                <a href="{% url 'crear_registro' %}" class="text-decoration-none">
                    <div class="card">
                        <i class="bi bi-file-earmark-plus"></i>
                        <h5>Crear Registro</h5>
                        <p>Agregar un nuevo documento</p>
                    </div>
                </a>
            </div>
            <div class="col-md-3 col-sm-6">
                <a href="{% url 'lista_registros' %}" class="text-decoration-none">
                    <div class="card">
                        <i class="bi bi-journal-text"></i>
                        <h5>Lista de Registros</h5>
                        <p>Consultar documentos archivados</p>
                    </div>
                </a>
            </div>
        </div>

        <!-- Login -->
        {% if not request.user.is_authenticated %}
        <div class="text-center">
            <a href="{% url 'login' %}" class="btn login-btn">
                <i class="bi bi-box-arrow-in-right"></i> Iniciar Sesión
            </a>
        </div>
        {% endif %}
    </div>

    <!-- Footer -->
    <footer>
        <p>&copy; {{ current_year }} Hospital del Sarare - Central de Archivos del Sarare. Todos los derechos reservados.</p>
    </footer>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            anime({
                targets: '.stats-card, .quick-links .card',
                opacity: [0, 1],
                translateY: [30, 0],
                duration: 800,
                delay: anime.stagger(100),
                easing: 'easeOutExpo'
            });
        });
    </script>
</body>
</html>


### .\documentos\templates\images\fuid_logo.png ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]


### .\documentos\templates\registration\login.html ###
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Iniciar sesión</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <!-- Animate.css -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    <!-- Anime.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js"></script>
    <style>
        body {
            background: linear-gradient(135deg, #fefefe, #f2f2f2);
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            overflow: hidden; /* Ocultar scroll durante la animación inicial */
        }
        .hero {
            background: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.05);
            padding: 2rem;
            margin-bottom: 2rem;
            opacity: 0; /* Para animación */
        }
        .hero h1 {
            font-size: 2rem;
            font-weight: 700;
            color: #003366;
            margin-bottom: 1rem;
            text-align: center;
        }
        .hero p {
            font-size: 1rem;
            color: #333;
            text-align: center;
            margin-bottom: 0.5rem;
        }
        .hero strong {
            color: #003366;
        }

        .login-container {
            background: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.05);
            padding: 2rem;
            max-width: 400px;
            margin: 0 auto;
            opacity: 0; /* Para animación */
        }
        .login-container h2 {
            font-size: 1.5rem;
            font-weight: 700;
            color: #003366;
            margin-bottom: 1rem;
            text-align: center;
        }
        .form-label {
            font-weight: 600;
            color: #333;
        }
        .btn-primary {
            background-color: #0069d9 !important;
            border: none;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .btn-primary:hover {
            background-color: #005bb5 !important;
            transform: scale(1.05);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .footer-info {
            text-align: center;
            color: #555;
            font-size: 0.85rem;
            margin-top: 3rem;
            opacity: 0; /* Para animación */
        }
        .footer-info p {
            margin: 0.25rem 0;
        }
        /* Contenedor principal para animaciones */
        #mainContainer {
            opacity: 0;
            padding-top: 2rem;
        }
    </style>
</head>
<body>
    <div id="mainContainer">
        <div class="container">
            <!-- Hero Section con información de la empresa y el software -->
            <div class="hero animate__animated animate__fadeInDown">
                <h1>Hospital del Sarare</h1>
                <p><strong>Central de Archivos del Sarare</strong> - Sistema de Gestión Documental</p>
                <p>Administra y controla toda la información archivística de manera eficiente, segura y transparente.</p>
                <p>Facilitando la toma de decisiones, la conservación de la memoria institucional y el cumplimiento de estándares archivísticos.</p>
            </div>

            <!-- Contenedor de Login -->
            <div class="login-container animate__animated animate__fadeInUp animate__delay-1s">
                <h2>Iniciar sesión</h2>
                <form method="post">
                    {% csrf_token %}
                    <div class="mb-3">
                        <label for="id_username" class="form-label">Usuario</label>
                        <input type="text" name="username" class="form-control" id="id_username" required>
                    </div>
                    <div class="mb-3">
                        <label for="id_password" class="form-label">Contraseña</label>
                        <input type="password" name="password" class="form-control" id="id_password" required>
                    </div>
                    <button type="submit" class="btn btn-primary w-100"><i class="bi bi-box-arrow-in-right"></i> Iniciar sesión</button>
                </form>
            </div>

            <div class="footer-info animate__animated animate__fadeInUp animate__delay-2s">
                <p>© {{ current_year }} Hospital del Sarare - Central de Archivos del Sarare</p>
                <p>Desarrollado para optimizar procesos, garantizar la conservación de documentos y brindar accesibilidad a la información.</p>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Animación principal del contenedor
            anime({
                targets: '#mainContainer',
                opacity: [0,1],
                duration: 1000,
                easing: 'easeOutExpo'
            });

            // Permitir scroll después de la animación
            setTimeout(() => {
                document.body.style.overflow = 'auto';
            }, 1200);
        });
    </script>
</body>
</html>


### .\documentos\templatetags\custom_filters.py ###
from django import template

register = template.Library()

@register.filter(name='add_class')
def add_class(value, css_class):
        try:
            return value.as_widget(attrs={"class": css_class})
        except AttributeError:
            # Si el valor no tiene el método `as_widget`, lo devolvemos sin cambios
            return value


### .\documentos\templatetags\__init__.py ###


### .\documentos\templatetags\__pycache__\custom_filters.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\templatetags\__pycache__\__init__.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\__pycache__\admin.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\__pycache__\apps.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\__pycache__\crear_registros.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\__pycache__\forms.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\__pycache__\models.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\__pycache__\services.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\__pycache__\urls.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\__pycache__\views.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\documentos\__pycache__\__init__.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\hospital_document_management\asgi.py ###
"""
ASGI config for hospital_document_management project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "hospital_document_management.settings")

application = get_asgi_application()


### .\hospital_document_management\settings.py ###
"""
Django settings for hospital_document_management project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-d$)ugw$3r9dk((bjsm=9gd#cot4(w_0_ih)4-a6az&7#&x-q7@"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

CSRF_TRUSTED_ORIGINS = [
    'https://*.ngrok-free.app'
]



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',  # Agrega esta línea
    'documentos',  # Nuestra aplicación personalizada
    'adminlte3',
    'adminlte3_theme',
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "hospital_document_management.urls"

# TEMPLATES = [
#     {
#         "BACKEND": "django.template.backends.django.DjangoTemplates",
#         "DIRS": [
#             BASE_DIR / "documentos" / "templates"  # Asegúrate de que esta ruta sea correcta
#         ],
#         "APP_DIRS": True,
#         "OPTIONS": {
#             "context_processors": [
#                 "django.template.context_processors.debug",
#                 "django.template.context_processors.request",
#                 "django.contrib.auth.context_processors.auth",
#                 "django.contrib.messages.context_processors.messages",
#             ],
#         },
#     },
# ]



WSGI_APPLICATION = "hospital_document_management.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'hospital_document_management',
#         'USER': 'root',
#         'PASSWORD': 'Ratade2patas',
#         'HOST': 'localhost',
#         'PORT': '3306',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'mssql',
        'NAME': 'archivo_hospital_sarare',
        'HOST': 'Z5573',  # Nombre del servidor
        'PORT': '',  # Deja vacío si es el puerto por defecto
        'USER': '',  # Solo si usas SQL Server Authentication
        'PASSWORD': '',  # Solo si usas SQL Server Authentication
        'OPTIONS': {
            'driver': 'ODBC Driver 17 for SQL Server',  # Verifica que tengas este driver instalado
        },
    },
}








# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


LOGIN_URL = '/registros/login/'
LOGOUT_REDIRECT_URL = '/registros/login/'
LOGIN_REDIRECT_URL = '/registros/welcome/'


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "documentos" / "static", 
]
STATIC_ROOT = BASE_DIR / "staticfiles"  # Ajusta el nombre si quieres

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [],  # Puedes agregar rutas personalizadas aquí si es necesario
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "documentos" / "templates"
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]




### .\hospital_document_management\urls.py ###
"""
URL configuration for hospital_document_management project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import path, include
from documentos import views
from django.shortcuts import redirect

urlpatterns = [
    # Admin
    path('admin/', admin.site.urls),

    # Rutas específicas desde 'documentos' si es necesario
    path('registros/', views.lista_registros, name='lista_registros'),
    path('registros/nuevo/', views.crear_registro, name='crear_registro'),
    path('registros/<int:pk>/editar/', views.editar_registro, name='editar_registro'),
    path('registros/<int:pk>/eliminar/', views.eliminar_registro, name='eliminar_registro'),

    # FUIDs
    path('registros/fuids/', views.lista_fuids, name='fuid_list'),
    path('registros/fuids/create/', views.FUIDCreateView.as_view(), name='fuid_form'),
    path('registros/fuids/detalle/<int:pk>/', views.detalle_fuid, name='detalle_fuid'),

    # Página de bienvenida
    path('registros/', include('documentos.urls')),  # Incluye las rutas de documentos
    path('registros/welcome/', views.welcome_view, name='welcome'),
    path('detalle-ficha/<int:consecutivo>/', views.detalle_ficha_paciente, name='detalle_ficha'),
    path('editar-ficha/<int:consecutivo>/', views.EditarFichaPaciente.as_view(), name='editar_ficha'),
    



    # Redirige la raíz del proyecto (/) a la página de registros
    path('', lambda request: redirect('welcome')),

    
]



### .\hospital_document_management\wsgi.py ###
"""
WSGI config for hospital_document_management project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "hospital_document_management.settings")

application = get_wsgi_application()


### .\hospital_document_management\__init__.py ###


### .\hospital_document_management\__pycache__\settings.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\hospital_document_management\__pycache__\urls.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\hospital_document_management\__pycache__\wsgi.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


### .\hospital_document_management\__pycache__\__init__.cpython-312.pyc ###
[Error al leer el archivo: 'utf-8' codec can't decode byte 0xcb in position 0: invalid continuation byte]


